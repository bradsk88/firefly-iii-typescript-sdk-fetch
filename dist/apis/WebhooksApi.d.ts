/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { WebhookArray, WebhookAttemptArray, WebhookAttemptSingle, WebhookMessageArray, WebhookMessageSingle, WebhookSingle, WebhookStore, WebhookUpdate } from '../models';
export interface DeleteWebhookRequest {
    id: string;
}
export interface DeleteWebhookMessageRequest {
    id: string;
    messageId: number;
}
export interface DeleteWebhookMessageAttemptRequest {
    id: string;
    messageId: number;
    attemptId: number;
}
export interface GetSingleWebhookMessageRequest {
    id: string;
    messageId: number;
}
export interface GetSingleWebhookMessageAttemptRequest {
    id: string;
    messageId: number;
    attemptId: number;
}
export interface GetWebhookRequest {
    id: string;
}
export interface GetWebhookMessageAttemptsRequest {
    id: string;
    messageId: number;
    page?: number;
}
export interface GetWebhookMessagesRequest {
    id: string;
}
export interface ListWebhookRequest {
    page?: number;
}
export interface StoreWebhookRequest {
    webhookStore: WebhookStore;
}
export interface SubmitWebookRequest {
    id: string;
}
export interface UpdateWebhookRequest {
    id: string;
    webhookUpdate: WebhookUpdate;
}
/**
 *
 */
export declare class WebhooksApi extends runtime.BaseAPI {
    /**
     * Delete a webhook.
     * Delete a webhook.
     */
    deleteWebhookRaw(requestParameters: DeleteWebhookRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a webhook.
     * Delete a webhook.
     */
    deleteWebhook(requestParameters: DeleteWebhookRequest): Promise<void>;
    /**
     * Delete a webhook message. Any time a webhook is triggered the message is stored before it\'s sent. You can delete them before or after sending.
     * Delete a webhook message.
     */
    deleteWebhookMessageRaw(requestParameters: DeleteWebhookMessageRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a webhook message. Any time a webhook is triggered the message is stored before it\'s sent. You can delete them before or after sending.
     * Delete a webhook message.
     */
    deleteWebhookMessage(requestParameters: DeleteWebhookMessageRequest): Promise<void>;
    /**
     * Delete a webhook message attempt. If you delete all attempts for a webhook message, Firefly III will (once again) assume all is well with the webhook message and will try to send it again.
     * Delete a webhook attempt.
     */
    deleteWebhookMessageAttemptRaw(requestParameters: DeleteWebhookMessageAttemptRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a webhook message attempt. If you delete all attempts for a webhook message, Firefly III will (once again) assume all is well with the webhook message and will try to send it again.
     * Delete a webhook attempt.
     */
    deleteWebhookMessageAttempt(requestParameters: DeleteWebhookMessageAttemptRequest): Promise<void>;
    /**
     * When a webhook is triggered it will store the actual content of the webhook in a webhook message. You can view and analyse a single one using this endpoint.
     * Get a single message from a webhook.
     */
    getSingleWebhookMessageRaw(requestParameters: GetSingleWebhookMessageRequest): Promise<runtime.ApiResponse<WebhookMessageSingle>>;
    /**
     * When a webhook is triggered it will store the actual content of the webhook in a webhook message. You can view and analyse a single one using this endpoint.
     * Get a single message from a webhook.
     */
    getSingleWebhookMessage(requestParameters: GetSingleWebhookMessageRequest): Promise<WebhookMessageSingle>;
    /**
     * When a webhook message fails to send it will store the failure in an \"attempt\". You can view and analyse these. Webhooks messages that receive too many attempts (failures) will not be fired. You must first clear out old attempts and try again. This endpoint shows you the details of a single attempt. The ID of the attempt must match the corresponding webhook and webhook message.
     * Get a single failed attempt from a single webhook message.
     */
    getSingleWebhookMessageAttemptRaw(requestParameters: GetSingleWebhookMessageAttemptRequest): Promise<runtime.ApiResponse<WebhookAttemptSingle>>;
    /**
     * When a webhook message fails to send it will store the failure in an \"attempt\". You can view and analyse these. Webhooks messages that receive too many attempts (failures) will not be fired. You must first clear out old attempts and try again. This endpoint shows you the details of a single attempt. The ID of the attempt must match the corresponding webhook and webhook message.
     * Get a single failed attempt from a single webhook message.
     */
    getSingleWebhookMessageAttempt(requestParameters: GetSingleWebhookMessageAttemptRequest): Promise<WebhookAttemptSingle>;
    /**
     * Gets all info of a single webhook.
     * Get a single webhook.
     */
    getWebhookRaw(requestParameters: GetWebhookRequest): Promise<runtime.ApiResponse<WebhookSingle>>;
    /**
     * Gets all info of a single webhook.
     * Get a single webhook.
     */
    getWebhook(requestParameters: GetWebhookRequest): Promise<WebhookSingle>;
    /**
     * When a webhook message fails to send it will store the failure in an \"attempt\". You can view and analyse these. Webhook messages that receive too many attempts (failures) will not be sent again. You must first clear out old attempts before the message can go out again.
     * Get all the failed attempts of a single webhook message.
     */
    getWebhookMessageAttemptsRaw(requestParameters: GetWebhookMessageAttemptsRequest): Promise<runtime.ApiResponse<WebhookAttemptArray>>;
    /**
     * When a webhook message fails to send it will store the failure in an \"attempt\". You can view and analyse these. Webhook messages that receive too many attempts (failures) will not be sent again. You must first clear out old attempts before the message can go out again.
     * Get all the failed attempts of a single webhook message.
     */
    getWebhookMessageAttempts(requestParameters: GetWebhookMessageAttemptsRequest): Promise<WebhookAttemptArray>;
    /**
     * When a webhook is triggered the actual message that will be send is stored in a \"message\". You can view and analyse these messages.
     * Get all the messages of a single webhook.
     */
    getWebhookMessagesRaw(requestParameters: GetWebhookMessagesRequest): Promise<runtime.ApiResponse<WebhookMessageArray>>;
    /**
     * When a webhook is triggered the actual message that will be send is stored in a \"message\". You can view and analyse these messages.
     * Get all the messages of a single webhook.
     */
    getWebhookMessages(requestParameters: GetWebhookMessagesRequest): Promise<WebhookMessageArray>;
    /**
     * List all the user\'s webhooks.
     * List all webhooks.
     */
    listWebhookRaw(requestParameters: ListWebhookRequest): Promise<runtime.ApiResponse<WebhookArray>>;
    /**
     * List all the user\'s webhooks.
     * List all webhooks.
     */
    listWebhook(requestParameters: ListWebhookRequest): Promise<WebhookArray>;
    /**
     * Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret.
     * Store a new webhook
     */
    storeWebhookRaw(requestParameters: StoreWebhookRequest): Promise<runtime.ApiResponse<WebhookSingle>>;
    /**
     * Creates a new webhook. The data required can be submitted as a JSON body or as a list of parameters. The webhook will be given a random secret.
     * Store a new webhook
     */
    storeWebhook(requestParameters: StoreWebhookRequest): Promise<WebhookSingle>;
    /**
     * This endpoint will submit any open messages for this webhook. This is an asynchronous operation, so you can\'t see the result. Refresh the webhook message and/or the webhook message attempts to see the results. This may take some time if the webhook receiver is slow.
     * Submit messages for a webhook.
     */
    submitWebookRaw(requestParameters: SubmitWebookRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This endpoint will submit any open messages for this webhook. This is an asynchronous operation, so you can\'t see the result. Refresh the webhook message and/or the webhook message attempts to see the results. This may take some time if the webhook receiver is slow.
     * Submit messages for a webhook.
     */
    submitWebook(requestParameters: SubmitWebookRequest): Promise<void>;
    /**
     * Update an existing webhook\'s information. If you wish to reset the secret, submit any value as the \"secret\". Firefly III will take this as a hint and reset the secret of the webhook.
     * Update existing webhook.
     */
    updateWebhookRaw(requestParameters: UpdateWebhookRequest): Promise<runtime.ApiResponse<WebhookSingle>>;
    /**
     * Update an existing webhook\'s information. If you wish to reset the secret, submit any value as the \"secret\". Firefly III will take this as a hint and reset the secret of the webhook.
     * Update existing webhook.
     */
    updateWebhook(requestParameters: UpdateWebhookRequest): Promise<WebhookSingle>;
}
