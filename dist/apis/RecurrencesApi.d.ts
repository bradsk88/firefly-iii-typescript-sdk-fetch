/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { RecurrenceArray, RecurrenceSingle, RecurrenceStore, RecurrenceUpdate, TransactionArray, TransactionTypeFilter } from '../models';
export interface DeleteRecurrenceRequest {
    id: string;
}
export interface GetRecurrenceRequest {
    id: string;
}
export interface ListRecurrenceRequest {
    page?: number;
}
export interface ListTransactionByRecurrenceRequest {
    id: string;
    page?: number;
    start?: Date;
    end?: Date;
    type?: TransactionTypeFilter;
}
export interface StoreRecurrenceRequest {
    recurrenceStore: RecurrenceStore;
}
export interface UpdateRecurrenceRequest {
    id: string;
    recurrenceUpdate: RecurrenceUpdate;
}
/**
 *
 */
export declare class RecurrencesApi extends runtime.BaseAPI {
    /**
     * Delete a recurring transaction. Transactions created by the recurring transaction will not be deleted.
     * Delete a recurring transaction.
     */
    deleteRecurrenceRaw(requestParameters: DeleteRecurrenceRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a recurring transaction. Transactions created by the recurring transaction will not be deleted.
     * Delete a recurring transaction.
     */
    deleteRecurrence(requestParameters: DeleteRecurrenceRequest): Promise<void>;
    /**
     * Get a single recurring transaction.
     * Get a single recurring transaction.
     */
    getRecurrenceRaw(requestParameters: GetRecurrenceRequest): Promise<runtime.ApiResponse<RecurrenceSingle>>;
    /**
     * Get a single recurring transaction.
     * Get a single recurring transaction.
     */
    getRecurrence(requestParameters: GetRecurrenceRequest): Promise<RecurrenceSingle>;
    /**
     * List all recurring transactions.
     * List all recurring transactions.
     */
    listRecurrenceRaw(requestParameters: ListRecurrenceRequest): Promise<runtime.ApiResponse<RecurrenceArray>>;
    /**
     * List all recurring transactions.
     * List all recurring transactions.
     */
    listRecurrence(requestParameters: ListRecurrenceRequest): Promise<RecurrenceArray>;
    /**
     * List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
     * List all transactions created by a recurring transaction.
     */
    listTransactionByRecurrenceRaw(requestParameters: ListTransactionByRecurrenceRequest): Promise<runtime.ApiResponse<TransactionArray>>;
    /**
     * List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
     * List all transactions created by a recurring transaction.
     */
    listTransactionByRecurrence(requestParameters: ListTransactionByRecurrenceRequest): Promise<TransactionArray>;
    /**
     * Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new recurring transaction
     */
    storeRecurrenceRaw(requestParameters: StoreRecurrenceRequest): Promise<runtime.ApiResponse<RecurrenceSingle>>;
    /**
     * Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new recurring transaction
     */
    storeRecurrence(requestParameters: StoreRecurrenceRequest): Promise<RecurrenceSingle>;
    /**
     * Update existing recurring transaction.
     * Update existing recurring transaction.
     */
    updateRecurrenceRaw(requestParameters: UpdateRecurrenceRequest): Promise<runtime.ApiResponse<RecurrenceSingle>>;
    /**
     * Update existing recurring transaction.
     * Update existing recurring transaction.
     */
    updateRecurrence(requestParameters: UpdateRecurrenceRequest): Promise<RecurrenceSingle>;
}
