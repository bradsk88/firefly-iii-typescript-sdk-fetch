/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AttachmentArray, TagArray, TagModelStore, TagModelUpdate, TagSingle, TransactionArray, TransactionTypeFilter } from '../models';
export interface DeleteTagRequest {
    tag: string;
}
export interface GetTagRequest {
    tag: string;
    page?: number;
}
export interface ListAttachmentByTagRequest {
    tag: string;
    page?: number;
}
export interface ListTagRequest {
    page?: number;
}
export interface ListTransactionByTagRequest {
    tag: string;
    page?: number;
    start?: Date;
    end?: Date;
    type?: TransactionTypeFilter;
}
export interface StoreTagRequest {
    tagModelStore: TagModelStore;
}
export interface UpdateTagRequest {
    tag: string;
    tagModelUpdate: TagModelUpdate;
}
/**
 *
 */
export declare class TagsApi extends runtime.BaseAPI {
    /**
     * Delete an tag.
     * Delete an tag.
     */
    deleteTagRaw(requestParameters: DeleteTagRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete an tag.
     * Delete an tag.
     */
    deleteTag(requestParameters: DeleteTagRequest): Promise<void>;
    /**
     * Get a single tag.
     * Get a single tag.
     */
    getTagRaw(requestParameters: GetTagRequest): Promise<runtime.ApiResponse<TagSingle>>;
    /**
     * Get a single tag.
     * Get a single tag.
     */
    getTag(requestParameters: GetTagRequest): Promise<TagSingle>;
    /**
     * Lists all attachments.
     * Lists all attachments.
     */
    listAttachmentByTagRaw(requestParameters: ListAttachmentByTagRequest): Promise<runtime.ApiResponse<AttachmentArray>>;
    /**
     * Lists all attachments.
     * Lists all attachments.
     */
    listAttachmentByTag(requestParameters: ListAttachmentByTagRequest): Promise<AttachmentArray>;
    /**
     * List all of the user\'s tags.
     * List all tags.
     */
    listTagRaw(requestParameters: ListTagRequest): Promise<runtime.ApiResponse<TagArray>>;
    /**
     * List all of the user\'s tags.
     * List all tags.
     */
    listTag(requestParameters: ListTagRequest): Promise<TagArray>;
    /**
     * List all transactions with this tag.
     * List all transactions with this tag.
     */
    listTransactionByTagRaw(requestParameters: ListTransactionByTagRequest): Promise<runtime.ApiResponse<TransactionArray>>;
    /**
     * List all transactions with this tag.
     * List all transactions with this tag.
     */
    listTransactionByTag(requestParameters: ListTransactionByTagRequest): Promise<TransactionArray>;
    /**
     * Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new tag
     */
    storeTagRaw(requestParameters: StoreTagRequest): Promise<runtime.ApiResponse<TagSingle>>;
    /**
     * Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new tag
     */
    storeTag(requestParameters: StoreTagRequest): Promise<TagSingle>;
    /**
     * Update existing tag.
     * Update existing tag.
     */
    updateTagRaw(requestParameters: UpdateTagRequest): Promise<runtime.ApiResponse<TagSingle>>;
    /**
     * Update existing tag.
     * Update existing tag.
     */
    updateTag(requestParameters: UpdateTagRequest): Promise<TagSingle>;
}
