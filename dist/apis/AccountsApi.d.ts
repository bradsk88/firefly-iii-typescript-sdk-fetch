/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AccountArray, AccountSingle, AccountStore, AccountTypeFilter, AccountUpdate, AttachmentArray, PiggyBankArray, TransactionArray, TransactionTypeFilter } from '../models';
export interface DeleteAccountRequest {
    id: string;
}
export interface GetAccountRequest {
    id: string;
    date?: Date;
}
export interface ListAccountRequest {
    page?: number;
    date?: Date;
    type?: AccountTypeFilter;
}
export interface ListAttachmentByAccountRequest {
    id: string;
    page?: number;
}
export interface ListPiggyBankByAccountRequest {
    id: string;
    page?: number;
}
export interface ListTransactionByAccountRequest {
    id: string;
    page?: number;
    limit?: number;
    start?: Date;
    end?: Date;
    type?: TransactionTypeFilter;
}
export interface StoreAccountRequest {
    accountStore: AccountStore;
}
export interface UpdateAccountRequest {
    id: string;
    accountUpdate: AccountUpdate;
}
/**
 *
 */
export declare class AccountsApi extends runtime.BaseAPI {
    /**
     * Will permanently delete an account. Any associated transactions and piggy banks are ALSO deleted. Cannot be recovered from.
     * Permanently delete account.
     */
    deleteAccountRaw(requestParameters: DeleteAccountRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Will permanently delete an account. Any associated transactions and piggy banks are ALSO deleted. Cannot be recovered from.
     * Permanently delete account.
     */
    deleteAccount(requestParameters: DeleteAccountRequest): Promise<void>;
    /**
     * Returns a single account by its ID.
     * Get single account.
     */
    getAccountRaw(requestParameters: GetAccountRequest): Promise<runtime.ApiResponse<AccountSingle>>;
    /**
     * Returns a single account by its ID.
     * Get single account.
     */
    getAccount(requestParameters: GetAccountRequest): Promise<AccountSingle>;
    /**
     * This endpoint returns a list of all the accounts owned by the authenticated user.
     * List all accounts.
     */
    listAccountRaw(requestParameters: ListAccountRequest): Promise<runtime.ApiResponse<AccountArray>>;
    /**
     * This endpoint returns a list of all the accounts owned by the authenticated user.
     * List all accounts.
     */
    listAccount(requestParameters: ListAccountRequest): Promise<AccountArray>;
    /**
     * Lists all attachments.
     * Lists all attachments.
     */
    listAttachmentByAccountRaw(requestParameters: ListAttachmentByAccountRequest): Promise<runtime.ApiResponse<AttachmentArray>>;
    /**
     * Lists all attachments.
     * Lists all attachments.
     */
    listAttachmentByAccount(requestParameters: ListAttachmentByAccountRequest): Promise<AttachmentArray>;
    /**
     * This endpoint returns a list of all the piggy banks connected to the account.
     * List all piggy banks related to the account.
     */
    listPiggyBankByAccountRaw(requestParameters: ListPiggyBankByAccountRequest): Promise<runtime.ApiResponse<PiggyBankArray>>;
    /**
     * This endpoint returns a list of all the piggy banks connected to the account.
     * List all piggy banks related to the account.
     */
    listPiggyBankByAccount(requestParameters: ListPiggyBankByAccountRequest): Promise<PiggyBankArray>;
    /**
     * This endpoint returns a list of all the transactions connected to the account.
     * List all transactions related to the account.
     */
    listTransactionByAccountRaw(requestParameters: ListTransactionByAccountRequest): Promise<runtime.ApiResponse<TransactionArray>>;
    /**
     * This endpoint returns a list of all the transactions connected to the account.
     * List all transactions related to the account.
     */
    listTransactionByAccount(requestParameters: ListTransactionByAccountRequest): Promise<TransactionArray>;
    /**
     * Creates a new account. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).
     * Create new account.
     */
    storeAccountRaw(requestParameters: StoreAccountRequest): Promise<runtime.ApiResponse<AccountSingle>>;
    /**
     * Creates a new account. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).
     * Create new account.
     */
    storeAccount(requestParameters: StoreAccountRequest): Promise<AccountSingle>;
    /**
     * Used to update a single account. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory.
     * Update existing account.
     */
    updateAccountRaw(requestParameters: UpdateAccountRequest): Promise<runtime.ApiResponse<AccountSingle>>;
    /**
     * Used to update a single account. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory.
     * Update existing account.
     */
    updateAccount(requestParameters: UpdateAccountRequest): Promise<AccountSingle>;
}
