/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { RuleArray, RuleGroupArray, RuleGroupSingle, RuleGroupStore, RuleGroupUpdate, TransactionArray } from '../models';
export interface DeleteRuleGroupRequest {
    id: string;
}
export interface FireRuleGroupRequest {
    id: string;
    start?: Date;
    end?: Date;
    accounts?: Array<number>;
}
export interface GetRuleGroupRequest {
    id: string;
}
export interface ListRuleByGroupRequest {
    id: string;
    page?: number;
}
export interface ListRuleGroupRequest {
    page?: number;
}
export interface StoreRuleGroupRequest {
    ruleGroupStore: RuleGroupStore;
}
export interface TestRuleGroupRequest {
    id: string;
    page?: number;
    start?: Date;
    end?: Date;
    searchLimit?: number;
    triggeredLimit?: number;
    accounts?: Array<number>;
}
export interface UpdateRuleGroupRequest {
    id: string;
    ruleGroupUpdate: RuleGroupUpdate;
}
/**
 *
 */
export declare class RuleGroupsApi extends runtime.BaseAPI {
    /**
     * Delete a rule group.
     * Delete a rule group.
     */
    deleteRuleGroupRaw(requestParameters: DeleteRuleGroupRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a rule group.
     * Delete a rule group.
     */
    deleteRuleGroup(requestParameters: DeleteRuleGroupRequest): Promise<void>;
    /**
     * Fire the rule group on your transactions. Changes will be made by the rules in the rule group! Limit the result if you want to.
     * Fire the rule group on your transactions.
     */
    fireRuleGroupRaw(requestParameters: FireRuleGroupRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Fire the rule group on your transactions. Changes will be made by the rules in the rule group! Limit the result if you want to.
     * Fire the rule group on your transactions.
     */
    fireRuleGroup(requestParameters: FireRuleGroupRequest): Promise<void>;
    /**
     * Get a single rule group. This does not include the rules. For that, see below.
     * Get a single rule group.
     */
    getRuleGroupRaw(requestParameters: GetRuleGroupRequest): Promise<runtime.ApiResponse<RuleGroupSingle>>;
    /**
     * Get a single rule group. This does not include the rules. For that, see below.
     * Get a single rule group.
     */
    getRuleGroup(requestParameters: GetRuleGroupRequest): Promise<RuleGroupSingle>;
    /**
     * List rules in this rule group.
     * List rules in this rule group.
     */
    listRuleByGroupRaw(requestParameters: ListRuleByGroupRequest): Promise<runtime.ApiResponse<RuleArray>>;
    /**
     * List rules in this rule group.
     * List rules in this rule group.
     */
    listRuleByGroup(requestParameters: ListRuleByGroupRequest): Promise<RuleArray>;
    /**
     * List all rule groups.
     * List all rule groups.
     */
    listRuleGroupRaw(requestParameters: ListRuleGroupRequest): Promise<runtime.ApiResponse<RuleGroupArray>>;
    /**
     * List all rule groups.
     * List all rule groups.
     */
    listRuleGroup(requestParameters: ListRuleGroupRequest): Promise<RuleGroupArray>;
    /**
     * Creates a new rule group. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new rule group.
     */
    storeRuleGroupRaw(requestParameters: StoreRuleGroupRequest): Promise<runtime.ApiResponse<RuleGroupSingle>>;
    /**
     * Creates a new rule group. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new rule group.
     */
    storeRuleGroup(requestParameters: StoreRuleGroupRequest): Promise<RuleGroupSingle>;
    /**
     * Test which transactions would be hit by the rule group. No changes will be made. Limit the result if you want to.
     * Test which transactions would be hit by the rule group. No changes will be made.
     */
    testRuleGroupRaw(requestParameters: TestRuleGroupRequest): Promise<runtime.ApiResponse<TransactionArray>>;
    /**
     * Test which transactions would be hit by the rule group. No changes will be made. Limit the result if you want to.
     * Test which transactions would be hit by the rule group. No changes will be made.
     */
    testRuleGroup(requestParameters: TestRuleGroupRequest): Promise<TransactionArray>;
    /**
     * Update existing rule group.
     * Update existing rule group.
     */
    updateRuleGroupRaw(requestParameters: UpdateRuleGroupRequest): Promise<runtime.ApiResponse<RuleGroupSingle>>;
    /**
     * Update existing rule group.
     * Update existing rule group.
     */
    updateRuleGroup(requestParameters: UpdateRuleGroupRequest): Promise<RuleGroupSingle>;
}
