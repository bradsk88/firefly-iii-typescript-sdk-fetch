/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { RuleArray, RuleSingle, RuleStore, RuleUpdate, TransactionArray } from '../models';
export interface DeleteRuleRequest {
    id: string;
}
export interface FireRuleRequest {
    id: string;
    start?: Date;
    end?: Date;
    accounts?: Array<number>;
}
export interface GetRuleRequest {
    id: string;
}
export interface ListRuleRequest {
    page?: number;
}
export interface StoreRuleRequest {
    ruleStore: RuleStore;
}
export interface TestRuleRequest {
    id: string;
    start?: Date;
    end?: Date;
    accounts?: Array<number>;
}
export interface UpdateRuleRequest {
    id: string;
    ruleUpdate: RuleUpdate;
}
/**
 *
 */
export declare class RulesApi extends runtime.BaseAPI {
    /**
     * Delete an rule.
     * Delete an rule.
     */
    deleteRuleRaw(requestParameters: DeleteRuleRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete an rule.
     * Delete an rule.
     */
    deleteRule(requestParameters: DeleteRuleRequest): Promise<void>;
    /**
     * Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
     * Fire the rule on your transactions.
     */
    fireRuleRaw(requestParameters: FireRuleRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
     * Fire the rule on your transactions.
     */
    fireRule(requestParameters: FireRuleRequest): Promise<void>;
    /**
     * Get a single rule.
     * Get a single rule.
     */
    getRuleRaw(requestParameters: GetRuleRequest): Promise<runtime.ApiResponse<RuleSingle>>;
    /**
     * Get a single rule.
     * Get a single rule.
     */
    getRule(requestParameters: GetRuleRequest): Promise<RuleSingle>;
    /**
     * List all rules.
     * List all rules.
     */
    listRuleRaw(requestParameters: ListRuleRequest): Promise<runtime.ApiResponse<RuleArray>>;
    /**
     * List all rules.
     * List all rules.
     */
    listRule(requestParameters: ListRuleRequest): Promise<RuleArray>;
    /**
     * Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new rule
     */
    storeRuleRaw(requestParameters: StoreRuleRequest): Promise<runtime.ApiResponse<RuleSingle>>;
    /**
     * Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new rule
     */
    storeRule(requestParameters: StoreRuleRequest): Promise<RuleSingle>;
    /**
     * Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
     * Test which transactions would be hit by the rule. No changes will be made.
     */
    testRuleRaw(requestParameters: TestRuleRequest): Promise<runtime.ApiResponse<TransactionArray>>;
    /**
     * Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
     * Test which transactions would be hit by the rule. No changes will be made.
     */
    testRule(requestParameters: TestRuleRequest): Promise<TransactionArray>;
    /**
     * Update existing rule.
     * Update existing rule.
     */
    updateRuleRaw(requestParameters: UpdateRuleRequest): Promise<runtime.ApiResponse<RuleSingle>>;
    /**
     * Update existing rule.
     * Update existing rule.
     */
    updateRule(requestParameters: UpdateRuleRequest): Promise<RuleSingle>;
}
