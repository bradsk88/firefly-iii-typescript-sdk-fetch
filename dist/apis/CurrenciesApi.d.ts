/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AccountArray, AccountTypeFilter, AvailableBudgetArray, BillArray, BudgetLimitArray, CurrencyArray, CurrencySingle, CurrencyStore, CurrencyUpdate, RecurrenceArray, RuleArray, TransactionArray, TransactionTypeFilter } from '../models';
export interface DefaultCurrencyRequest {
    code: string;
}
export interface DeleteCurrencyRequest {
    code: string;
}
export interface DisableCurrencyRequest {
    code: number;
}
export interface EnableCurrencyRequest {
    code: string;
}
export interface GetCurrencyRequest {
    code: string;
}
export interface ListAccountByCurrencyRequest {
    code: string;
    page?: number;
    date?: Date;
    type?: AccountTypeFilter;
}
export interface ListAvailableBudgetByCurrencyRequest {
    code: string;
    page?: number;
}
export interface ListBillByCurrencyRequest {
    code: string;
    page?: number;
}
export interface ListBudgetLimitByCurrencyRequest {
    code: string;
    page?: number;
    start?: Date;
    end?: Date;
}
export interface ListCurrencyRequest {
    page?: number;
}
export interface ListRecurrenceByCurrencyRequest {
    code: string;
    page?: number;
}
export interface ListRuleByCurrencyRequest {
    code: string;
    page?: number;
}
export interface ListTransactionByCurrencyRequest {
    code: string;
    page?: number;
    start?: Date;
    end?: Date;
    type?: TransactionTypeFilter;
}
export interface StoreCurrencyRequest {
    currencyStore: CurrencyStore;
}
export interface UpdateCurrencyRequest {
    code: string;
    currencyUpdate: CurrencyUpdate;
}
/**
 *
 */
export declare class CurrenciesApi extends runtime.BaseAPI {
    /**
     * Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
     * Make currency default currency.
     */
    defaultCurrencyRaw(requestParameters: DefaultCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>>;
    /**
     * Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
     * Make currency default currency.
     */
    defaultCurrency(requestParameters: DefaultCurrencyRequest): Promise<CurrencySingle>;
    /**
     * Delete a currency.
     * Delete a currency.
     */
    deleteCurrencyRaw(requestParameters: DeleteCurrencyRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a currency.
     * Delete a currency.
     */
    deleteCurrency(requestParameters: DeleteCurrencyRequest): Promise<void>;
    /**
     * Disable a currency.
     * Disable a currency.
     */
    disableCurrencyRaw(requestParameters: DisableCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>>;
    /**
     * Disable a currency.
     * Disable a currency.
     */
    disableCurrency(requestParameters: DisableCurrencyRequest): Promise<CurrencySingle>;
    /**
     * Enable a single currency.
     * Enable a single currency.
     */
    enableCurrencyRaw(requestParameters: EnableCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>>;
    /**
     * Enable a single currency.
     * Enable a single currency.
     */
    enableCurrency(requestParameters: EnableCurrencyRequest): Promise<CurrencySingle>;
    /**
     * Get a single currency.
     * Get a single currency.
     */
    getCurrencyRaw(requestParameters: GetCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>>;
    /**
     * Get a single currency.
     * Get a single currency.
     */
    getCurrency(requestParameters: GetCurrencyRequest): Promise<CurrencySingle>;
    /**
     * Get the user\'s default currency.
     * Get the user\'s default currency.
     */
    getDefaultCurrencyRaw(): Promise<runtime.ApiResponse<CurrencySingle>>;
    /**
     * Get the user\'s default currency.
     * Get the user\'s default currency.
     */
    getDefaultCurrency(): Promise<CurrencySingle>;
    /**
     * List all accounts with this currency.
     * List all accounts with this currency.
     */
    listAccountByCurrencyRaw(requestParameters: ListAccountByCurrencyRequest): Promise<runtime.ApiResponse<AccountArray>>;
    /**
     * List all accounts with this currency.
     * List all accounts with this currency.
     */
    listAccountByCurrency(requestParameters: ListAccountByCurrencyRequest): Promise<AccountArray>;
    /**
     * List all available budgets with this currency.
     * List all available budgets with this currency.
     */
    listAvailableBudgetByCurrencyRaw(requestParameters: ListAvailableBudgetByCurrencyRequest): Promise<runtime.ApiResponse<AvailableBudgetArray>>;
    /**
     * List all available budgets with this currency.
     * List all available budgets with this currency.
     */
    listAvailableBudgetByCurrency(requestParameters: ListAvailableBudgetByCurrencyRequest): Promise<AvailableBudgetArray>;
    /**
     * List all bills with this currency.
     * List all bills with this currency.
     */
    listBillByCurrencyRaw(requestParameters: ListBillByCurrencyRequest): Promise<runtime.ApiResponse<BillArray>>;
    /**
     * List all bills with this currency.
     * List all bills with this currency.
     */
    listBillByCurrency(requestParameters: ListBillByCurrencyRequest): Promise<BillArray>;
    /**
     * List all budget limits with this currency
     * List all budget limits with this currency
     */
    listBudgetLimitByCurrencyRaw(requestParameters: ListBudgetLimitByCurrencyRequest): Promise<runtime.ApiResponse<BudgetLimitArray>>;
    /**
     * List all budget limits with this currency
     * List all budget limits with this currency
     */
    listBudgetLimitByCurrency(requestParameters: ListBudgetLimitByCurrencyRequest): Promise<BudgetLimitArray>;
    /**
     * List all currencies.
     * List all currencies.
     */
    listCurrencyRaw(requestParameters: ListCurrencyRequest): Promise<runtime.ApiResponse<CurrencyArray>>;
    /**
     * List all currencies.
     * List all currencies.
     */
    listCurrency(requestParameters: ListCurrencyRequest): Promise<CurrencyArray>;
    /**
     * List all recurring transactions with this currency.
     * List all recurring transactions with this currency.
     */
    listRecurrenceByCurrencyRaw(requestParameters: ListRecurrenceByCurrencyRequest): Promise<runtime.ApiResponse<RecurrenceArray>>;
    /**
     * List all recurring transactions with this currency.
     * List all recurring transactions with this currency.
     */
    listRecurrenceByCurrency(requestParameters: ListRecurrenceByCurrencyRequest): Promise<RecurrenceArray>;
    /**
     * List all rules with this currency.
     * List all rules with this currency.
     */
    listRuleByCurrencyRaw(requestParameters: ListRuleByCurrencyRequest): Promise<runtime.ApiResponse<RuleArray>>;
    /**
     * List all rules with this currency.
     * List all rules with this currency.
     */
    listRuleByCurrency(requestParameters: ListRuleByCurrencyRequest): Promise<RuleArray>;
    /**
     * List all transactions with this currency.
     * List all transactions with this currency.
     */
    listTransactionByCurrencyRaw(requestParameters: ListTransactionByCurrencyRequest): Promise<runtime.ApiResponse<TransactionArray>>;
    /**
     * List all transactions with this currency.
     * List all transactions with this currency.
     */
    listTransactionByCurrency(requestParameters: ListTransactionByCurrencyRequest): Promise<TransactionArray>;
    /**
     * Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new currency
     */
    storeCurrencyRaw(requestParameters: StoreCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>>;
    /**
     * Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new currency
     */
    storeCurrency(requestParameters: StoreCurrencyRequest): Promise<CurrencySingle>;
    /**
     * Update existing currency.
     * Update existing currency.
     */
    updateCurrencyRaw(requestParameters: UpdateCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>>;
    /**
     * Update existing currency.
     * Update existing currency.
     */
    updateCurrency(requestParameters: UpdateCurrencyRequest): Promise<CurrencySingle>;
}
