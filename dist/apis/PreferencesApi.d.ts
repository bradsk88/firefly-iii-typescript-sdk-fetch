/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Preference, PreferenceArray, PreferenceSingle, PreferenceUpdate } from '../models';
export interface GetPreferenceRequest {
    name: string;
}
export interface ListPreferenceRequest {
    page?: number;
}
export interface StorePreferenceRequest {
    preference: Preference;
}
export interface UpdatePreferenceRequest {
    name: string;
    preferenceUpdate: PreferenceUpdate;
}
/**
 *
 */
export declare class PreferencesApi extends runtime.BaseAPI {
    /**
     * Return a single preference and the value.
     * Return a single preference.
     */
    getPreferenceRaw(requestParameters: GetPreferenceRequest): Promise<runtime.ApiResponse<PreferenceSingle>>;
    /**
     * Return a single preference and the value.
     * Return a single preference.
     */
    getPreference(requestParameters: GetPreferenceRequest): Promise<PreferenceSingle>;
    /**
     * List all of the preferences of the user.
     * List all users preferences.
     */
    listPreferenceRaw(requestParameters: ListPreferenceRequest): Promise<runtime.ApiResponse<PreferenceArray>>;
    /**
     * List all of the preferences of the user.
     * List all users preferences.
     */
    listPreference(requestParameters: ListPreferenceRequest): Promise<PreferenceArray>;
    /**
     * This endpoint creates a new preference. The name and data are free-format, and entirely up to you. If the preference is not used in Firefly III itself it may not be configurable through the user interface, but you can use this endpoint to persist custom data for your own app.
     * Store a new preference for this user.
     */
    storePreferenceRaw(requestParameters: StorePreferenceRequest): Promise<runtime.ApiResponse<PreferenceSingle>>;
    /**
     * This endpoint creates a new preference. The name and data are free-format, and entirely up to you. If the preference is not used in Firefly III itself it may not be configurable through the user interface, but you can use this endpoint to persist custom data for your own app.
     * Store a new preference for this user.
     */
    storePreference(requestParameters: StorePreferenceRequest): Promise<PreferenceSingle>;
    /**
     * Update a user\'s preference.
     * Update preference
     */
    updatePreferenceRaw(requestParameters: UpdatePreferenceRequest): Promise<runtime.ApiResponse<PreferenceSingle>>;
    /**
     * Update a user\'s preference.
     * Update preference
     */
    updatePreference(requestParameters: UpdatePreferenceRequest): Promise<PreferenceSingle>;
}
