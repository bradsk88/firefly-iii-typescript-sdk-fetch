"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class TransactionsApi extends runtime.BaseAPI {
    /**
     * Delete a transaction.
     * Delete a transaction.
     */
    async deleteTransactionRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Delete a transaction.
     * Delete a transaction.
     */
    async deleteTransaction(requestParameters) {
        await this.deleteTransactionRaw(requestParameters);
    }
    /**
     * Delete an individual journal (split) from a transaction.
     * Delete split from transaction
     */
    async deleteTransactionJournalRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteTransactionJournal.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/api/v1/transaction-journals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Delete an individual journal (split) from a transaction.
     * Delete split from transaction
     */
    async deleteTransactionJournal(requestParameters) {
        await this.deleteTransactionJournalRaw(requestParameters);
    }
    /**
     * Get a single transaction.
     * Get a single transaction.
     */
    async getTransactionRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionSingleFromJSON)(jsonValue));
    }
    /**
     * Get a single transaction.
     * Get a single transaction.
     */
    async getTransaction(requestParameters) {
        const response = await this.getTransactionRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get a single transaction by underlying journal (split).
     * Get a single transaction, based on one of the underlying transaction journals (transaction splits).
     */
    async getTransactionByJournalRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getTransactionByJournal.');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/api/v1/transaction-journals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionSingleFromJSON)(jsonValue));
    }
    /**
     * Get a single transaction by underlying journal (split).
     * Get a single transaction, based on one of the underlying transaction journals (transaction splits).
     */
    async getTransactionByJournal(requestParameters) {
        const response = await this.getTransactionByJournalRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists all attachments.
     * Lists all attachments.
     */
    async listAttachmentByTransactionRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling listAttachmentByTransaction.');
        }
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/{id}/attachments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AttachmentArrayFromJSON)(jsonValue));
    }
    /**
     * Lists all attachments.
     * Lists all attachments.
     */
    async listAttachmentByTransaction(requestParameters) {
        const response = await this.listAttachmentByTransactionRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists all piggy bank events.
     * Lists all piggy bank events.
     */
    async listEventByTransactionRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling listEventByTransaction.');
        }
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/{id}/piggy_bank_events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PiggyBankEventArrayFromJSON)(jsonValue));
    }
    /**
     * Lists all piggy bank events.
     * Lists all piggy bank events.
     */
    async listEventByTransaction(requestParameters) {
        const response = await this.listEventByTransactionRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists all the transaction links for an individual journal (a split). Don\'t use the group ID, you need the actual underlying journal (the split).
     * Lists all the transaction links for an individual journal (individual split).
     */
    async listLinksByJournalRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling listLinksByJournal.');
        }
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/api/v1/transaction-journals/{id}/links`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionLinkArrayFromJSON)(jsonValue));
    }
    /**
     * Lists all the transaction links for an individual journal (a split). Don\'t use the group ID, you need the actual underlying journal (the split).
     * Lists all the transaction links for an individual journal (individual split).
     */
    async listLinksByJournal(requestParameters) {
        const response = await this.listLinksByJournalRaw(requestParameters);
        return await response.value();
    }
    /**
     * List all the user\'s transactions.
     * List all the user\'s transactions.
     */
    async listTransactionRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }
        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start.toISOString().substr(0, 10);
        }
        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end.toISOString().substr(0, 10);
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionArrayFromJSON)(jsonValue));
    }
    /**
     * List all the user\'s transactions.
     * List all the user\'s transactions.
     */
    async listTransaction(requestParameters) {
        const response = await this.listTransactionRaw(requestParameters);
        return await response.value();
    }
    /**
     * Creates a new transaction. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new transaction
     */
    async storeTransactionRaw(requestParameters) {
        if (requestParameters.transactionStore === null || requestParameters.transactionStore === undefined) {
            throw new runtime.RequiredError('transactionStore', 'Required parameter requestParameters.transactionStore was null or undefined when calling storeTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TransactionStoreToJSON)(requestParameters.transactionStore),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionSingleFromJSON)(jsonValue));
    }
    /**
     * Creates a new transaction. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new transaction
     */
    async storeTransaction(requestParameters) {
        const response = await this.storeTransactionRaw(requestParameters);
        return await response.value();
    }
    /**
     * Update an existing transaction.
     * Update existing transaction. For more information, see https://docs.firefly-iii.org/firefly-iii/api/specials
     */
    async updateTransactionRaw(requestParameters) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateTransaction.');
        }
        if (requestParameters.transactionUpdate === null || requestParameters.transactionUpdate === undefined) {
            throw new runtime.RequiredError('transactionUpdate', 'Required parameter requestParameters.transactionUpdate was null or undefined when calling updateTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            }
            else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }
        const response = await this.request({
            path: `/api/v1/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.TransactionUpdateToJSON)(requestParameters.transactionUpdate),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionSingleFromJSON)(jsonValue));
    }
    /**
     * Update an existing transaction.
     * Update existing transaction. For more information, see https://docs.firefly-iii.org/firefly-iii/api/specials
     */
    async updateTransaction(requestParameters) {
        const response = await this.updateTransactionRaw(requestParameters);
        return await response.value();
    }
}
exports.TransactionsApi = TransactionsApi;
