/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { LinkType, LinkTypeArray, LinkTypeSingle, LinkTypeUpdate, TransactionArray, TransactionLinkArray, TransactionLinkSingle, TransactionLinkStore, TransactionLinkUpdate, TransactionTypeFilter } from '../models';
export interface DeleteLinkTypeRequest {
    id: string;
}
export interface DeleteTransactionLinkRequest {
    id: string;
}
export interface GetLinkTypeRequest {
    id: string;
}
export interface GetTransactionLinkRequest {
    id: string;
}
export interface ListLinkTypeRequest {
    page?: number;
}
export interface ListTransactionByLinkTypeRequest {
    id: string;
    page?: number;
    start?: Date;
    end?: Date;
    type?: TransactionTypeFilter;
}
export interface ListTransactionLinkRequest {
    page?: number;
}
export interface StoreLinkTypeRequest {
    linkType: LinkType;
}
export interface StoreTransactionLinkRequest {
    transactionLinkStore: TransactionLinkStore;
}
export interface UpdateLinkTypeRequest {
    id: string;
    linkTypeUpdate: LinkTypeUpdate;
}
export interface UpdateTransactionLinkRequest {
    id: string;
    transactionLinkUpdate: TransactionLinkUpdate;
}
/**
 *
 */
export declare class LinksApi extends runtime.BaseAPI {
    /**
     * Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable=false flag when you list it.
     * Permanently delete link type.
     */
    deleteLinkTypeRaw(requestParameters: DeleteLinkTypeRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable=false flag when you list it.
     * Permanently delete link type.
     */
    deleteLinkType(requestParameters: DeleteLinkTypeRequest): Promise<void>;
    /**
     * Will permanently delete link. Transactions remain.
     * Permanently delete link between transactions.
     */
    deleteTransactionLinkRaw(requestParameters: DeleteTransactionLinkRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Will permanently delete link. Transactions remain.
     * Permanently delete link between transactions.
     */
    deleteTransactionLink(requestParameters: DeleteTransactionLinkRequest): Promise<void>;
    /**
     * Returns a single link type by its ID.
     * Get single a link type.
     */
    getLinkTypeRaw(requestParameters: GetLinkTypeRequest): Promise<runtime.ApiResponse<LinkTypeSingle>>;
    /**
     * Returns a single link type by its ID.
     * Get single a link type.
     */
    getLinkType(requestParameters: GetLinkTypeRequest): Promise<LinkTypeSingle>;
    /**
     * Returns a single link by its ID.
     * Get a single link.
     */
    getTransactionLinkRaw(requestParameters: GetTransactionLinkRequest): Promise<runtime.ApiResponse<TransactionLinkSingle>>;
    /**
     * Returns a single link by its ID.
     * Get a single link.
     */
    getTransactionLink(requestParameters: GetTransactionLinkRequest): Promise<TransactionLinkSingle>;
    /**
     * List all the link types the system has. These include the default ones as well as any new ones.
     * List all types of links.
     */
    listLinkTypeRaw(requestParameters: ListLinkTypeRequest): Promise<runtime.ApiResponse<LinkTypeArray>>;
    /**
     * List all the link types the system has. These include the default ones as well as any new ones.
     * List all types of links.
     */
    listLinkType(requestParameters: ListLinkTypeRequest): Promise<LinkTypeArray>;
    /**
     * List all transactions under this link type, both the inward and outward transactions.
     * List all transactions under this link type.
     */
    listTransactionByLinkTypeRaw(requestParameters: ListTransactionByLinkTypeRequest): Promise<runtime.ApiResponse<TransactionArray>>;
    /**
     * List all transactions under this link type, both the inward and outward transactions.
     * List all transactions under this link type.
     */
    listTransactionByLinkType(requestParameters: ListTransactionByLinkTypeRequest): Promise<TransactionArray>;
    /**
     * List all the transaction links.
     * List all transaction links.
     */
    listTransactionLinkRaw(requestParameters: ListTransactionLinkRequest): Promise<runtime.ApiResponse<TransactionLinkArray>>;
    /**
     * List all the transaction links.
     * List all transaction links.
     */
    listTransactionLink(requestParameters: ListTransactionLinkRequest): Promise<TransactionLinkArray>;
    /**
     * Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).
     * Create a new link type
     */
    storeLinkTypeRaw(requestParameters: StoreLinkTypeRequest): Promise<runtime.ApiResponse<LinkTypeSingle>>;
    /**
     * Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).
     * Create a new link type
     */
    storeLinkType(requestParameters: StoreLinkTypeRequest): Promise<LinkTypeSingle>;
    /**
     * Store a new link between two transactions. For this end point you need the journal_id from a transaction.
     * Create a new link between transactions
     */
    storeTransactionLinkRaw(requestParameters: StoreTransactionLinkRequest): Promise<runtime.ApiResponse<TransactionLinkSingle>>;
    /**
     * Store a new link between two transactions. For this end point you need the journal_id from a transaction.
     * Create a new link between transactions
     */
    storeTransactionLink(requestParameters: StoreTransactionLinkRequest): Promise<TransactionLinkSingle>;
    /**
     * Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable=false flag when you list it.
     * Update existing link type.
     */
    updateLinkTypeRaw(requestParameters: UpdateLinkTypeRequest): Promise<runtime.ApiResponse<LinkTypeSingle>>;
    /**
     * Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable=false flag when you list it.
     * Update existing link type.
     */
    updateLinkType(requestParameters: UpdateLinkTypeRequest): Promise<LinkTypeSingle>;
    /**
     * Used to update a single existing link.
     * Update an existing link between transactions.
     */
    updateTransactionLinkRaw(requestParameters: UpdateTransactionLinkRequest): Promise<runtime.ApiResponse<TransactionLinkSingle>>;
    /**
     * Used to update a single existing link.
     * Update an existing link between transactions.
     */
    updateTransactionLink(requestParameters: UpdateTransactionLinkRequest): Promise<TransactionLinkSingle>;
}
