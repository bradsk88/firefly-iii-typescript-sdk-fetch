/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CronResult, SystemInfo, UserSingle } from '../models';
export interface GetCronRequest {
    cliToken: string;
    date?: Date;
    force?: boolean;
}
/**
 *
 */
export declare class AboutApi extends runtime.BaseAPI {
    /**
     * Returns general system information and versions of the (supporting) software.
     * System information end point.
     */
    getAboutRaw(): Promise<runtime.ApiResponse<SystemInfo>>;
    /**
     * Returns general system information and versions of the (supporting) software.
     * System information end point.
     */
    getAbout(): Promise<SystemInfo>;
    /**
     * Firefly III has one endpoint for its various cron related tasks. Send a GET to this endpoint to run the cron. The cron requires the CLI token to be present. The cron job will fire for all users.
     * Cron job endpoint
     */
    getCronRaw(requestParameters: GetCronRequest): Promise<runtime.ApiResponse<CronResult>>;
    /**
     * Firefly III has one endpoint for its various cron related tasks. Send a GET to this endpoint to run the cron. The cron requires the CLI token to be present. The cron job will fire for all users.
     * Cron job endpoint
     */
    getCron(requestParameters: GetCronRequest): Promise<CronResult>;
    /**
     * Returns the currently authenticated user.
     * Currently authenticated user endpoint.
     */
    getCurrentUserRaw(): Promise<runtime.ApiResponse<UserSingle>>;
    /**
     * Returns the currently authenticated user.
     * Currently authenticated user endpoint.
     */
    getCurrentUser(): Promise<UserSingle>;
}
