/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { User, UserArray, UserSingle } from '../models';
export interface DeleteUserRequest {
    id: string;
}
export interface GetUserRequest {
    id: string;
}
export interface ListUserRequest {
    page?: number;
}
export interface StoreUserRequest {
    user: User;
}
export interface UpdateUserRequest {
    id: string;
    user: User;
}
/**
 *
 */
export declare class UsersApi extends runtime.BaseAPI {
    /**
     * Delete a user. You cannot delete the user you\'re authenticated with. This cannot be undone. Be careful!
     * Delete a user.
     */
    deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a user. You cannot delete the user you\'re authenticated with. This cannot be undone. Be careful!
     * Delete a user.
     */
    deleteUser(requestParameters: DeleteUserRequest): Promise<void>;
    /**
     * Gets all info of a single user.
     * Get a single user.
     */
    getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<UserSingle>>;
    /**
     * Gets all info of a single user.
     * Get a single user.
     */
    getUser(requestParameters: GetUserRequest): Promise<UserSingle>;
    /**
     * List all the users in this instance of Firefly III.
     * List all users.
     */
    listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<UserArray>>;
    /**
     * List all the users in this instance of Firefly III.
     * List all users.
     */
    listUser(requestParameters: ListUserRequest): Promise<UserArray>;
    /**
     * Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \"forgot password\" function.
     * Store a new user
     */
    storeUserRaw(requestParameters: StoreUserRequest): Promise<runtime.ApiResponse<UserSingle>>;
    /**
     * Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the \"forgot password\" function.
     * Store a new user
     */
    storeUser(requestParameters: StoreUserRequest): Promise<UserSingle>;
    /**
     * Update existing user.
     * Update an existing user\'s information.
     */
    updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<UserSingle>>;
    /**
     * Update existing user.
     * Update an existing user\'s information.
     */
    updateUser(requestParameters: UpdateUserRequest): Promise<UserSingle>;
}
