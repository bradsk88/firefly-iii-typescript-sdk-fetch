/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AttachmentArray, AttachmentSingle, AttachmentStore, AttachmentUpdate } from '../models';
export interface DeleteAttachmentRequest {
    id: string;
}
export interface DownloadAttachmentRequest {
    id: string;
}
export interface GetAttachmentRequest {
    id: string;
}
export interface ListAttachmentRequest {
    page?: number;
}
export interface StoreAttachmentRequest {
    attachmentStore: AttachmentStore;
}
export interface UpdateAttachmentRequest {
    id: string;
    attachmentUpdate: AttachmentUpdate;
}
export interface UploadAttachmentRequest {
    id: string;
    body?: Blob;
}
/**
 *
 */
export declare class AttachmentsApi extends runtime.BaseAPI {
    /**
     * With this endpoint you delete an attachment, including any stored file data.
     * Delete an attachment.
     */
    deleteAttachmentRaw(requestParameters: DeleteAttachmentRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * With this endpoint you delete an attachment, including any stored file data.
     * Delete an attachment.
     */
    deleteAttachment(requestParameters: DeleteAttachmentRequest): Promise<void>;
    /**
     * This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \"application/octet-stream\" and content disposition \"attachment; filename=example.pdf\".
     * Download a single attachment.
     */
    downloadAttachmentRaw(requestParameters: DownloadAttachmentRequest): Promise<runtime.ApiResponse<Blob>>;
    /**
     * This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type \"application/octet-stream\" and content disposition \"attachment; filename=example.pdf\".
     * Download a single attachment.
     */
    downloadAttachment(requestParameters: DownloadAttachmentRequest): Promise<Blob>;
    /**
     * Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below).
     * Get a single attachment.
     */
    getAttachmentRaw(requestParameters: GetAttachmentRequest): Promise<runtime.ApiResponse<AttachmentSingle>>;
    /**
     * Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below).
     * Get a single attachment.
     */
    getAttachment(requestParameters: GetAttachmentRequest): Promise<AttachmentSingle>;
    /**
     * This endpoint lists all attachments.
     * List all attachments.
     */
    listAttachmentRaw(requestParameters: ListAttachmentRequest): Promise<runtime.ApiResponse<AttachmentArray>>;
    /**
     * This endpoint lists all attachments.
     * List all attachments.
     */
    listAttachment(requestParameters: ListAttachmentRequest): Promise<AttachmentArray>;
    /**
     * Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object.
     * Store a new attachment.
     */
    storeAttachmentRaw(requestParameters: StoreAttachmentRequest): Promise<runtime.ApiResponse<AttachmentSingle>>;
    /**
     * Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object.
     * Store a new attachment.
     */
    storeAttachment(requestParameters: StoreAttachmentRequest): Promise<AttachmentSingle>;
    /**
     * Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below.
     * Update existing attachment.
     */
    updateAttachmentRaw(requestParameters: UpdateAttachmentRequest): Promise<runtime.ApiResponse<AttachmentSingle>>;
    /**
     * Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below.
     * Update existing attachment.
     */
    updateAttachment(requestParameters: UpdateAttachmentRequest): Promise<AttachmentSingle>;
    /**
     * Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data.
     * Upload an attachment.
     */
    uploadAttachmentRaw(requestParameters: UploadAttachmentRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data.
     * Upload an attachment.
     */
    uploadAttachment(requestParameters: UploadAttachmentRequest): Promise<void>;
}
