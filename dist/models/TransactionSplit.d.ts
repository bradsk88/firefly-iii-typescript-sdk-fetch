/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AccountTypeProperty, TransactionTypeProperty } from './';
/**
 *
 * @export
 * @interface TransactionSplit
 */
export interface TransactionSplit {
    /**
     * User ID
     * @type {string}
     * @memberof TransactionSplit
     */
    readonly user?: string;
    /**
     * ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals
     * making up the splits of the transaction.
     * @type {string}
     * @memberof TransactionSplit
     */
    readonly transactionJournalId?: string;
    /**
     *
     * @type {TransactionTypeProperty}
     * @memberof TransactionSplit
     */
    type: TransactionTypeProperty;
    /**
     * Date of the transaction
     * @type {Date}
     * @memberof TransactionSplit
     */
    date: Date;
    /**
     * Order of this entry in the list of transactions.
     * @type {number}
     * @memberof TransactionSplit
     */
    order?: number | null;
    /**
     * Currency ID. Default is the source account's currency, or the user's default currency. Can be used instead of currency_code.
     * @type {string}
     * @memberof TransactionSplit
     */
    currencyId?: string | null;
    /**
     * Currency code. Default is the source account's currency, or the user's default currency. Can be used instead of currency_id.
     * @type {string}
     * @memberof TransactionSplit
     */
    currencyCode?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionSplit
     */
    readonly currencySymbol?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionSplit
     */
    readonly currencyName?: string;
    /**
     * Number of decimals used in this currency.
     * @type {number}
     * @memberof TransactionSplit
     */
    readonly currencyDecimalPlaces?: number;
    /**
     * Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
     * @type {string}
     * @memberof TransactionSplit
     */
    foreignCurrencyId?: string | null;
    /**
     * Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.
     * @type {string}
     * @memberof TransactionSplit
     */
    foreignCurrencyCode?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionSplit
     */
    readonly foreignCurrencySymbol?: string | null;
    /**
     * Number of decimals in the currency
     * @type {number}
     * @memberof TransactionSplit
     */
    readonly foreignCurrencyDecimalPlaces?: number | null;
    /**
     * Amount of the transaction.
     * @type {string}
     * @memberof TransactionSplit
     */
    amount: string;
    /**
     * The amount in a foreign currency.
     * @type {string}
     * @memberof TransactionSplit
     */
    foreignAmount?: string | null;
    /**
     * Description of the transaction.
     * @type {string}
     * @memberof TransactionSplit
     */
    description: string;
    /**
     * ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
     * @type {string}
     * @memberof TransactionSplit
     */
    sourceId: string | null;
    /**
     * Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
     * @type {string}
     * @memberof TransactionSplit
     */
    sourceName?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionSplit
     */
    readonly sourceIban?: string | null;
    /**
     *
     * @type {AccountTypeProperty}
     * @memberof TransactionSplit
     */
    sourceType?: AccountTypeProperty;
    /**
     * ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
     * @type {string}
     * @memberof TransactionSplit
     */
    destinationId: string | null;
    /**
     * Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
     * @type {string}
     * @memberof TransactionSplit
     */
    destinationName?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionSplit
     */
    readonly destinationIban?: string | null;
    /**
     *
     * @type {AccountTypeProperty}
     * @memberof TransactionSplit
     */
    destinationType?: AccountTypeProperty;
    /**
     * The budget ID for this transaction.
     * @type {string}
     * @memberof TransactionSplit
     */
    budgetId?: string | null;
    /**
     * The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
     * @type {string}
     * @memberof TransactionSplit
     */
    readonly budgetName?: string | null;
    /**
     * The category ID for this transaction.
     * @type {string}
     * @memberof TransactionSplit
     */
    categoryId?: string | null;
    /**
     * The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
     * @type {string}
     * @memberof TransactionSplit
     */
    categoryName?: string | null;
    /**
     * Optional. Use either this or the bill_name
     * @type {string}
     * @memberof TransactionSplit
     */
    billId?: string | null;
    /**
     * Optional. Use either this or the bill_id
     * @type {string}
     * @memberof TransactionSplit
     */
    billName?: string | null;
    /**
     * If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
     * @type {boolean}
     * @memberof TransactionSplit
     */
    reconciled?: boolean;
    /**
     *
     * @type {string}
     * @memberof TransactionSplit
     */
    notes?: string | null;
    /**
     * Array of tags.
     * @type {Array<string>}
     * @memberof TransactionSplit
     */
    tags?: Array<string> | null;
    /**
     * Reference to internal reference of other systems.
     * @type {string}
     * @memberof TransactionSplit
     */
    internalReference?: string | null;
    /**
     * Reference to external ID in other systems.
     * @type {string}
     * @memberof TransactionSplit
     */
    externalId?: string | null;
    /**
     * External, custom URL for this transaction.
     * @type {string}
     * @memberof TransactionSplit
     */
    externalUrl?: string | null;
    /**
     * System generated identifier for original creator of transaction.
     * @type {string}
     * @memberof TransactionSplit
     */
    readonly originalSource?: string | null;
    /**
     * Reference to recurrence that made the transaction.
     * @type {number}
     * @memberof TransactionSplit
     */
    readonly recurrenceId?: number | null;
    /**
     * Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite.
     * @type {number}
     * @memberof TransactionSplit
     */
    readonly recurrenceTotal?: number | null;
    /**
     * The # of the current transaction created under this recurrence.
     * @type {number}
     * @memberof TransactionSplit
     */
    readonly recurrenceCount?: number | null;
    /**
     * Internal ID of bunq transaction. DEPRECATED
     * @type {string}
     * @memberof TransactionSplit
     */
    bunqPaymentId?: string | null;
    /**
     * Hash value of original import transaction (for duplicate detection).
     * @type {string}
     * @memberof TransactionSplit
     */
    readonly importHashV2?: string | null;
    /**
     * SEPA Clearing Code
     * @type {string}
     * @memberof TransactionSplit
     */
    sepaCc?: string | null;
    /**
     * SEPA Opposing Account Identifier
     * @type {string}
     * @memberof TransactionSplit
     */
    sepaCtOp?: string | null;
    /**
     * SEPA end-to-end Identifier
     * @type {string}
     * @memberof TransactionSplit
     */
    sepaCtId?: string | null;
    /**
     * SEPA mandate identifier
     * @type {string}
     * @memberof TransactionSplit
     */
    sepaDb?: string | null;
    /**
     * SEPA Country
     * @type {string}
     * @memberof TransactionSplit
     */
    sepaCountry?: string | null;
    /**
     * SEPA External Purpose indicator
     * @type {string}
     * @memberof TransactionSplit
     */
    sepaEp?: string | null;
    /**
     * SEPA Creditor Identifier
     * @type {string}
     * @memberof TransactionSplit
     */
    sepaCi?: string | null;
    /**
     * SEPA Batch ID
     * @type {string}
     * @memberof TransactionSplit
     */
    sepaBatchId?: string | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplit
     */
    interestDate?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplit
     */
    bookDate?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplit
     */
    processDate?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplit
     */
    dueDate?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplit
     */
    paymentDate?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplit
     */
    invoiceDate?: Date | null;
    /**
     * Latitude of the transaction's location, if applicable. Can be used to draw a map.
     * @type {number}
     * @memberof TransactionSplit
     */
    latitude?: number | null;
    /**
     * Latitude of the transaction's location, if applicable. Can be used to draw a map.
     * @type {number}
     * @memberof TransactionSplit
     */
    longitude?: number | null;
    /**
     * Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
     * @type {number}
     * @memberof TransactionSplit
     */
    zoomLevel?: number | null;
    /**
     * If the transaction has attachments.
     * @type {boolean}
     * @memberof TransactionSplit
     */
    hasAttachments?: boolean;
}
export declare function TransactionSplitFromJSON(json: any): TransactionSplit;
export declare function TransactionSplitFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionSplit;
export declare function TransactionSplitToJSON(value?: TransactionSplit | null): any;
