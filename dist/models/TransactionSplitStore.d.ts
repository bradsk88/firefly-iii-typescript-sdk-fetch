/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { TransactionTypeProperty } from './';
/**
 *
 * @export
 * @interface TransactionSplitStore
 */
export interface TransactionSplitStore {
    /**
     *
     * @type {TransactionTypeProperty}
     * @memberof TransactionSplitStore
     */
    type: TransactionTypeProperty;
    /**
     * Date of the transaction
     * @type {Date}
     * @memberof TransactionSplitStore
     */
    date: Date;
    /**
     * Amount of the transaction.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    amount: string;
    /**
     * Description of the transaction.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    description: string;
    /**
     * Order of this entry in the list of transactions.
     * @type {number}
     * @memberof TransactionSplitStore
     */
    order?: number | null;
    /**
     * Currency ID. Default is the source account's currency, or the user's default currency. The value you submit may be overruled by the source or destination account.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    currencyId?: string | null;
    /**
     * Currency code. Default is the source account's currency, or the user's default currency. The value you submit may be overruled by the source or destination account.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    currencyCode?: string | null;
    /**
     * The amount in a foreign currency.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    foreignAmount?: string | null;
    /**
     * Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    foreignCurrencyId?: string | null;
    /**
     * Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    foreignCurrencyCode?: string | null;
    /**
     * The budget ID for this transaction.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    budgetId?: string | null;
    /**
     * The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    readonly budgetName?: string | null;
    /**
     * The category ID for this transaction.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    categoryId?: string | null;
    /**
     * The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    categoryName?: string | null;
    /**
     * ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    sourceId?: string | null;
    /**
     * Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    sourceName?: string | null;
    /**
     * ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    destinationId?: string | null;
    /**
     * Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    destinationName?: string | null;
    /**
     * If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
     * @type {boolean}
     * @memberof TransactionSplitStore
     */
    reconciled?: boolean;
    /**
     * Optional. Use either this or the piggy_bank_name
     * @type {number}
     * @memberof TransactionSplitStore
     */
    piggyBankId?: number;
    /**
     * Optional. Use either this or the piggy_bank_id
     * @type {string}
     * @memberof TransactionSplitStore
     */
    piggyBankName?: string;
    /**
     * Optional. Use either this or the bill_name
     * @type {string}
     * @memberof TransactionSplitStore
     */
    billId?: string | null;
    /**
     * Optional. Use either this or the bill_id
     * @type {string}
     * @memberof TransactionSplitStore
     */
    billName?: string | null;
    /**
     * Array of tags.
     * @type {Array<string>}
     * @memberof TransactionSplitStore
     */
    tags?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof TransactionSplitStore
     */
    notes?: string | null;
    /**
     * Reference to internal reference of other systems.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    internalReference?: string | null;
    /**
     * Reference to external ID in other systems.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    externalId?: string | null;
    /**
     * External, custom URL for this transaction.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    externalUrl?: string | null;
    /**
     * Internal ID of bunq transaction. Field is no longer used but still works.
     * @type {string}
     * @memberof TransactionSplitStore
     */
    bunqPaymentId?: string | null;
    /**
     * SEPA Clearing Code
     * @type {string}
     * @memberof TransactionSplitStore
     */
    sepaCc?: string | null;
    /**
     * SEPA Opposing Account Identifier
     * @type {string}
     * @memberof TransactionSplitStore
     */
    sepaCtOp?: string | null;
    /**
     * SEPA end-to-end Identifier
     * @type {string}
     * @memberof TransactionSplitStore
     */
    sepaCtId?: string | null;
    /**
     * SEPA mandate identifier
     * @type {string}
     * @memberof TransactionSplitStore
     */
    sepaDb?: string | null;
    /**
     * SEPA Country
     * @type {string}
     * @memberof TransactionSplitStore
     */
    sepaCountry?: string | null;
    /**
     * SEPA External Purpose indicator
     * @type {string}
     * @memberof TransactionSplitStore
     */
    sepaEp?: string | null;
    /**
     * SEPA Creditor Identifier
     * @type {string}
     * @memberof TransactionSplitStore
     */
    sepaCi?: string | null;
    /**
     * SEPA Batch ID
     * @type {string}
     * @memberof TransactionSplitStore
     */
    sepaBatchId?: string | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplitStore
     */
    interestDate?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplitStore
     */
    bookDate?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplitStore
     */
    processDate?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplitStore
     */
    dueDate?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplitStore
     */
    paymentDate?: Date | null;
    /**
     *
     * @type {Date}
     * @memberof TransactionSplitStore
     */
    invoiceDate?: Date | null;
}
export declare function TransactionSplitStoreFromJSON(json: any): TransactionSplitStore;
export declare function TransactionSplitStoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionSplitStore;
export declare function TransactionSplitStoreToJSON(value?: TransactionSplitStore | null): any;
