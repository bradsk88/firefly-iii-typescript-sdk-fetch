/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountTypeFilter,
    AccountTypeFilterFromJSON,
    AccountTypeFilterToJSON,
    AutocompleteAccount,
    AutocompleteAccountFromJSON,
    AutocompleteAccountToJSON,
    AutocompleteBill,
    AutocompleteBillFromJSON,
    AutocompleteBillToJSON,
    AutocompleteBudget,
    AutocompleteBudgetFromJSON,
    AutocompleteBudgetToJSON,
    AutocompleteCategory,
    AutocompleteCategoryFromJSON,
    AutocompleteCategoryToJSON,
    AutocompleteCurrency,
    AutocompleteCurrencyFromJSON,
    AutocompleteCurrencyToJSON,
    AutocompleteCurrencyCode,
    AutocompleteCurrencyCodeFromJSON,
    AutocompleteCurrencyCodeToJSON,
    AutocompleteObjectGroup,
    AutocompleteObjectGroupFromJSON,
    AutocompleteObjectGroupToJSON,
    AutocompletePiggy,
    AutocompletePiggyFromJSON,
    AutocompletePiggyToJSON,
    AutocompletePiggyBalance,
    AutocompletePiggyBalanceFromJSON,
    AutocompletePiggyBalanceToJSON,
    AutocompleteRecurrence,
    AutocompleteRecurrenceFromJSON,
    AutocompleteRecurrenceToJSON,
    AutocompleteRule,
    AutocompleteRuleFromJSON,
    AutocompleteRuleToJSON,
    AutocompleteRuleGroup,
    AutocompleteRuleGroupFromJSON,
    AutocompleteRuleGroupToJSON,
    AutocompleteTag,
    AutocompleteTagFromJSON,
    AutocompleteTagToJSON,
    AutocompleteTransaction,
    AutocompleteTransactionFromJSON,
    AutocompleteTransactionToJSON,
    AutocompleteTransactionID,
    AutocompleteTransactionIDFromJSON,
    AutocompleteTransactionIDToJSON,
    AutocompleteTransactionType,
    AutocompleteTransactionTypeFromJSON,
    AutocompleteTransactionTypeToJSON,
} from '../models';

export interface GetAccountsACRequest {
    query?: string;
    limit?: number;
    date?: string;
    type?: AccountTypeFilter;
}

export interface GetBillsACRequest {
    query?: string;
    limit?: number;
}

export interface GetBudgetsACRequest {
    query?: string;
    limit?: number;
}

export interface GetCategoriesACRequest {
    query?: string;
    limit?: number;
}

export interface GetCurrenciesACRequest {
    query?: string;
    limit?: number;
}

export interface GetCurrenciesCodeACRequest {
    query?: string;
    limit?: number;
}

export interface GetObjectGroupsACRequest {
    query?: string;
    limit?: number;
}

export interface GetPiggiesACRequest {
    query?: string;
    limit?: number;
}

export interface GetPiggiesBalanceACRequest {
    query?: string;
    limit?: number;
}

export interface GetRecurringACRequest {
    query?: string;
    limit?: number;
}

export interface GetRuleGroupsACRequest {
    query?: string;
    limit?: number;
}

export interface GetRulesACRequest {
    query?: string;
    limit?: number;
}

export interface GetTagACRequest {
    query?: string;
    limit?: number;
}

export interface GetTransactionTypesACRequest {
    query?: string;
    limit?: number;
}

export interface GetTransactionsACRequest {
    query?: string;
    limit?: number;
}

export interface GetTransactionsIDACRequest {
    query?: string;
    limit?: number;
}

/**
 * 
 */
export class AutocompleteApi extends runtime.BaseAPI {

    /**
     * Returns all accounts of the user returned in a basic auto-complete array.
     */
    async getAccountsACRaw(requestParameters: GetAccountsACRequest): Promise<runtime.ApiResponse<Array<AutocompleteAccount>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteAccountFromJSON));
    }

    /**
     * Returns all accounts of the user returned in a basic auto-complete array.
     */
    async getAccountsAC(requestParameters: GetAccountsACRequest): Promise<Array<AutocompleteAccount>> {
        const response = await this.getAccountsACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all bills of the user returned in a basic auto-complete array.
     */
    async getBillsACRaw(requestParameters: GetBillsACRequest): Promise<runtime.ApiResponse<Array<AutocompleteBill>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/bills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteBillFromJSON));
    }

    /**
     * Returns all bills of the user returned in a basic auto-complete array.
     */
    async getBillsAC(requestParameters: GetBillsACRequest): Promise<Array<AutocompleteBill>> {
        const response = await this.getBillsACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all budgets of the user returned in a basic auto-complete array.
     */
    async getBudgetsACRaw(requestParameters: GetBudgetsACRequest): Promise<runtime.ApiResponse<Array<AutocompleteBudget>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/budgets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteBudgetFromJSON));
    }

    /**
     * Returns all budgets of the user returned in a basic auto-complete array.
     */
    async getBudgetsAC(requestParameters: GetBudgetsACRequest): Promise<Array<AutocompleteBudget>> {
        const response = await this.getBudgetsACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all categories of the user returned in a basic auto-complete array.
     */
    async getCategoriesACRaw(requestParameters: GetCategoriesACRequest): Promise<runtime.ApiResponse<Array<AutocompleteCategory>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteCategoryFromJSON));
    }

    /**
     * Returns all categories of the user returned in a basic auto-complete array.
     */
    async getCategoriesAC(requestParameters: GetCategoriesACRequest): Promise<Array<AutocompleteCategory>> {
        const response = await this.getCategoriesACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all currencies of the user returned in a basic auto-complete array.
     */
    async getCurrenciesACRaw(requestParameters: GetCurrenciesACRequest): Promise<runtime.ApiResponse<Array<AutocompleteCurrency>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/currencies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteCurrencyFromJSON));
    }

    /**
     * Returns all currencies of the user returned in a basic auto-complete array.
     */
    async getCurrenciesAC(requestParameters: GetCurrenciesACRequest): Promise<Array<AutocompleteCurrency>> {
        const response = await this.getCurrenciesACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
     */
    async getCurrenciesCodeACRaw(requestParameters: GetCurrenciesCodeACRequest): Promise<runtime.ApiResponse<Array<AutocompleteCurrencyCode>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/currencies-with-code`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteCurrencyCodeFromJSON));
    }

    /**
     * Returns all currencies of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
     */
    async getCurrenciesCodeAC(requestParameters: GetCurrenciesCodeACRequest): Promise<Array<AutocompleteCurrencyCode>> {
        const response = await this.getCurrenciesCodeACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all object groups of the user returned in a basic auto-complete array.
     */
    async getObjectGroupsACRaw(requestParameters: GetObjectGroupsACRequest): Promise<runtime.ApiResponse<Array<AutocompleteObjectGroup>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/object-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteObjectGroupFromJSON));
    }

    /**
     * Returns all object groups of the user returned in a basic auto-complete array.
     */
    async getObjectGroupsAC(requestParameters: GetObjectGroupsACRequest): Promise<Array<AutocompleteObjectGroup>> {
        const response = await this.getObjectGroupsACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all piggy banks of the user returned in a basic auto-complete array.
     */
    async getPiggiesACRaw(requestParameters: GetPiggiesACRequest): Promise<runtime.ApiResponse<Array<AutocompletePiggy>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/piggy-banks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompletePiggyFromJSON));
    }

    /**
     * Returns all piggy banks of the user returned in a basic auto-complete array.
     */
    async getPiggiesAC(requestParameters: GetPiggiesACRequest): Promise<Array<AutocompletePiggy>> {
        const response = await this.getPiggiesACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information.
     */
    async getPiggiesBalanceACRaw(requestParameters: GetPiggiesBalanceACRequest): Promise<runtime.ApiResponse<Array<AutocompletePiggyBalance>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/piggy-banks-with-balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompletePiggyBalanceFromJSON));
    }

    /**
     * Returns all piggy banks of the user returned in a basic auto-complete array complemented with balance information.
     */
    async getPiggiesBalanceAC(requestParameters: GetPiggiesBalanceACRequest): Promise<Array<AutocompletePiggyBalance>> {
        const response = await this.getPiggiesBalanceACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all recurring transactions of the user returned in a basic auto-complete array.
     */
    async getRecurringACRaw(requestParameters: GetRecurringACRequest): Promise<runtime.ApiResponse<Array<AutocompleteRecurrence>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/recurring`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteRecurrenceFromJSON));
    }

    /**
     * Returns all recurring transactions of the user returned in a basic auto-complete array.
     */
    async getRecurringAC(requestParameters: GetRecurringACRequest): Promise<Array<AutocompleteRecurrence>> {
        const response = await this.getRecurringACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all rule groups of the user returned in a basic auto-complete array.
     */
    async getRuleGroupsACRaw(requestParameters: GetRuleGroupsACRequest): Promise<runtime.ApiResponse<Array<AutocompleteRuleGroup>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/rule-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteRuleGroupFromJSON));
    }

    /**
     * Returns all rule groups of the user returned in a basic auto-complete array.
     */
    async getRuleGroupsAC(requestParameters: GetRuleGroupsACRequest): Promise<Array<AutocompleteRuleGroup>> {
        const response = await this.getRuleGroupsACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all rules of the user returned in a basic auto-complete array.
     */
    async getRulesACRaw(requestParameters: GetRulesACRequest): Promise<runtime.ApiResponse<Array<AutocompleteRule>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/rules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteRuleFromJSON));
    }

    /**
     * Returns all rules of the user returned in a basic auto-complete array.
     */
    async getRulesAC(requestParameters: GetRulesACRequest): Promise<Array<AutocompleteRule>> {
        const response = await this.getRulesACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all tags of the user returned in a basic auto-complete array.
     */
    async getTagACRaw(requestParameters: GetTagACRequest): Promise<runtime.ApiResponse<Array<AutocompleteTag>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteTagFromJSON));
    }

    /**
     * Returns all tags of the user returned in a basic auto-complete array.
     */
    async getTagAC(requestParameters: GetTagACRequest): Promise<Array<AutocompleteTag>> {
        const response = await this.getTagACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all transaction types returned in a basic auto-complete array. English only.
     */
    async getTransactionTypesACRaw(requestParameters: GetTransactionTypesACRequest): Promise<runtime.ApiResponse<Array<AutocompleteTransactionType>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/transaction-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteTransactionTypeFromJSON));
    }

    /**
     * Returns all transaction types returned in a basic auto-complete array. English only.
     */
    async getTransactionTypesAC(requestParameters: GetTransactionTypesACRequest): Promise<Array<AutocompleteTransactionType>> {
        const response = await this.getTransactionTypesACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all transaction descriptions of the user returned in a basic auto-complete array.
     */
    async getTransactionsACRaw(requestParameters: GetTransactionsACRequest): Promise<runtime.ApiResponse<Array<AutocompleteTransaction>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteTransactionFromJSON));
    }

    /**
     * Returns all transaction descriptions of the user returned in a basic auto-complete array.
     */
    async getTransactionsAC(requestParameters: GetTransactionsACRequest): Promise<Array<AutocompleteTransaction>> {
        const response = await this.getTransactionsACRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
     */
    async getTransactionsIDACRaw(requestParameters: GetTransactionsIDACRequest): Promise<runtime.ApiResponse<Array<AutocompleteTransactionID>>> {
        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/autocomplete/transactions-with-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AutocompleteTransactionIDFromJSON));
    }

    /**
     * Returns all transactions, complemented with their ID, of the user returned in a basic auto-complete array. This endpoint is DEPRECATED and I suggest you DO NOT use it.
     */
    async getTransactionsIDAC(requestParameters: GetTransactionsIDACRequest): Promise<Array<AutocompleteTransactionID>> {
        const response = await this.getTransactionsIDACRaw(requestParameters);
        return await response.value();
    }

}
