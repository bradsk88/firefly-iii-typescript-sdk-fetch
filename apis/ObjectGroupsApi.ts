/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BillArray,
    BillArrayFromJSON,
    BillArrayToJSON,
    ObjectGroupArray,
    ObjectGroupArrayFromJSON,
    ObjectGroupArrayToJSON,
    ObjectGroupSingle,
    ObjectGroupSingleFromJSON,
    ObjectGroupSingleToJSON,
    ObjectGroupUpdate,
    ObjectGroupUpdateFromJSON,
    ObjectGroupUpdateToJSON,
    PiggyBankArray,
    PiggyBankArrayFromJSON,
    PiggyBankArrayToJSON,
    ValidationError,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface DeleteObjectGroupRequest {
    id: string;
}

export interface GetObjectGroupRequest {
    id: string;
}

export interface ListBillByObjectGroupRequest {
    id: string;
    page?: number;
}

export interface ListObjectGroupsRequest {
    page?: number;
}

export interface ListPiggyBankByObjectGroupRequest {
    id: string;
    page?: number;
}

export interface UpdateObjectGroupRequest {
    id: string;
    objectGroupUpdate: ObjectGroupUpdate;
}

/**
 * 
 */
export class ObjectGroupsApi extends runtime.BaseAPI {

    /**
     * Delete a object group.
     * Delete a object group.
     */
    async deleteObjectGroupRaw(requestParameters: DeleteObjectGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteObjectGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/object_groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a object group.
     * Delete a object group.
     */
    async deleteObjectGroup(requestParameters: DeleteObjectGroupRequest): Promise<void> {
        await this.deleteObjectGroupRaw(requestParameters);
    }

    /**
     * Get a single object group.
     * Get a single object group.
     */
    async getObjectGroupRaw(requestParameters: GetObjectGroupRequest): Promise<runtime.ApiResponse<ObjectGroupSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getObjectGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/object_groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectGroupSingleFromJSON(jsonValue));
    }

    /**
     * Get a single object group.
     * Get a single object group.
     */
    async getObjectGroup(requestParameters: GetObjectGroupRequest): Promise<ObjectGroupSingle> {
        const response = await this.getObjectGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all bills with this object group.
     * List all bills with this object group.
     */
    async listBillByObjectGroupRaw(requestParameters: ListBillByObjectGroupRequest): Promise<runtime.ApiResponse<BillArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listBillByObjectGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/object_groups/{id}/bills`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BillArrayFromJSON(jsonValue));
    }

    /**
     * List all bills with this object group.
     * List all bills with this object group.
     */
    async listBillByObjectGroup(requestParameters: ListBillByObjectGroupRequest): Promise<BillArray> {
        const response = await this.listBillByObjectGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all oject groups.
     * List all oject groups.
     */
    async listObjectGroupsRaw(requestParameters: ListObjectGroupsRequest): Promise<runtime.ApiResponse<ObjectGroupArray>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/object_groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectGroupArrayFromJSON(jsonValue));
    }

    /**
     * List all oject groups.
     * List all oject groups.
     */
    async listObjectGroups(requestParameters: ListObjectGroupsRequest): Promise<ObjectGroupArray> {
        const response = await this.listObjectGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint returns a list of all the piggy banks connected to the object group. 
     * List all piggy banks related to the object group.
     */
    async listPiggyBankByObjectGroupRaw(requestParameters: ListPiggyBankByObjectGroupRequest): Promise<runtime.ApiResponse<PiggyBankArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listPiggyBankByObjectGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/object_groups/{id}/piggy_banks`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PiggyBankArrayFromJSON(jsonValue));
    }

    /**
     * This endpoint returns a list of all the piggy banks connected to the object group. 
     * List all piggy banks related to the object group.
     */
    async listPiggyBankByObjectGroup(requestParameters: ListPiggyBankByObjectGroupRequest): Promise<PiggyBankArray> {
        const response = await this.listPiggyBankByObjectGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update existing object group.
     * Update existing object group.
     */
    async updateObjectGroupRaw(requestParameters: UpdateObjectGroupRequest): Promise<runtime.ApiResponse<ObjectGroupSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateObjectGroup.');
        }

        if (requestParameters.objectGroupUpdate === null || requestParameters.objectGroupUpdate === undefined) {
            throw new runtime.RequiredError('objectGroupUpdate','Required parameter requestParameters.objectGroupUpdate was null or undefined when calling updateObjectGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/object_groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ObjectGroupUpdateToJSON(requestParameters.objectGroupUpdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ObjectGroupSingleFromJSON(jsonValue));
    }

    /**
     * Update existing object group.
     * Update existing object group.
     */
    async updateObjectGroup(requestParameters: UpdateObjectGroupRequest): Promise<ObjectGroupSingle> {
        const response = await this.updateObjectGroupRaw(requestParameters);
        return await response.value();
    }

}
