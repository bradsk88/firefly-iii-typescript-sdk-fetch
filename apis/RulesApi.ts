/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RuleArray,
    RuleArrayFromJSON,
    RuleArrayToJSON,
    RuleSingle,
    RuleSingleFromJSON,
    RuleSingleToJSON,
    RuleStore,
    RuleStoreFromJSON,
    RuleStoreToJSON,
    RuleUpdate,
    RuleUpdateFromJSON,
    RuleUpdateToJSON,
    TransactionArray,
    TransactionArrayFromJSON,
    TransactionArrayToJSON,
    ValidationError,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface DeleteRuleRequest {
    id: string;
}

export interface FireRuleRequest {
    id: string;
    start?: Date;
    end?: Date;
    accounts?: Array<number>;
}

export interface GetRuleRequest {
    id: string;
}

export interface ListRuleRequest {
    page?: number;
}

export interface StoreRuleRequest {
    ruleStore: RuleStore;
}

export interface TestRuleRequest {
    id: string;
    start?: Date;
    end?: Date;
    accounts?: Array<number>;
}

export interface UpdateRuleRequest {
    id: string;
    ruleUpdate: RuleUpdate;
}

/**
 * 
 */
export class RulesApi extends runtime.BaseAPI {

    /**
     * Delete an rule.
     * Delete an rule.
     */
    async deleteRuleRaw(requestParameters: DeleteRuleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an rule.
     * Delete an rule.
     */
    async deleteRule(requestParameters: DeleteRuleRequest): Promise<void> {
        await this.deleteRuleRaw(requestParameters);
    }

    /**
     * Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
     * Fire the rule on your transactions.
     */
    async fireRuleRaw(requestParameters: FireRuleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fireRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/rules/{id}/trigger`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
     * Fire the rule on your transactions.
     */
    async fireRule(requestParameters: FireRuleRequest): Promise<void> {
        await this.fireRuleRaw(requestParameters);
    }

    /**
     * Get a single rule.
     * Get a single rule.
     */
    async getRuleRaw(requestParameters: GetRuleRequest): Promise<runtime.ApiResponse<RuleSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleSingleFromJSON(jsonValue));
    }

    /**
     * Get a single rule.
     * Get a single rule.
     */
    async getRule(requestParameters: GetRuleRequest): Promise<RuleSingle> {
        const response = await this.getRuleRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all rules.
     * List all rules.
     */
    async listRuleRaw(requestParameters: ListRuleRequest): Promise<runtime.ApiResponse<RuleArray>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/rules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleArrayFromJSON(jsonValue));
    }

    /**
     * List all rules.
     * List all rules.
     */
    async listRule(requestParameters: ListRuleRequest): Promise<RuleArray> {
        const response = await this.listRuleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new rule
     */
    async storeRuleRaw(requestParameters: StoreRuleRequest): Promise<runtime.ApiResponse<RuleSingle>> {
        if (requestParameters.ruleStore === null || requestParameters.ruleStore === undefined) {
            throw new runtime.RequiredError('ruleStore','Required parameter requestParameters.ruleStore was null or undefined when calling storeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/rules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RuleStoreToJSON(requestParameters.ruleStore),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleSingleFromJSON(jsonValue));
    }

    /**
     * Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new rule
     */
    async storeRule(requestParameters: StoreRuleRequest): Promise<RuleSingle> {
        const response = await this.storeRuleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
     * Test which transactions would be hit by the rule. No changes will be made.
     */
    async testRuleRaw(requestParameters: TestRuleRequest): Promise<runtime.ApiResponse<TransactionArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/rules/{id}/test`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionArrayFromJSON(jsonValue));
    }

    /**
     * Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
     * Test which transactions would be hit by the rule. No changes will be made.
     */
    async testRule(requestParameters: TestRuleRequest): Promise<TransactionArray> {
        const response = await this.testRuleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update existing rule.
     * Update existing rule.
     */
    async updateRuleRaw(requestParameters: UpdateRuleRequest): Promise<runtime.ApiResponse<RuleSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRule.');
        }

        if (requestParameters.ruleUpdate === null || requestParameters.ruleUpdate === undefined) {
            throw new runtime.RequiredError('ruleUpdate','Required parameter requestParameters.ruleUpdate was null or undefined when calling updateRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RuleUpdateToJSON(requestParameters.ruleUpdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleSingleFromJSON(jsonValue));
    }

    /**
     * Update existing rule.
     * Update existing rule.
     */
    async updateRule(requestParameters: UpdateRuleRequest): Promise<RuleSingle> {
        const response = await this.updateRuleRaw(requestParameters);
        return await response.value();
    }

}
