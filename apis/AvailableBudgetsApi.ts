/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AvailableBudgetArray,
    AvailableBudgetArrayFromJSON,
    AvailableBudgetArrayToJSON,
    AvailableBudgetSingle,
    AvailableBudgetSingleFromJSON,
    AvailableBudgetSingleToJSON,
    AvailableBudgetStore,
    AvailableBudgetStoreFromJSON,
    AvailableBudgetStoreToJSON,
    AvailableBudgetUpdate,
    AvailableBudgetUpdateFromJSON,
    AvailableBudgetUpdateToJSON,
    ValidationError,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface DeleteAvailableBudgetRequest {
    id: string;
}

export interface GetAvailableBudgetRequest {
    id: string;
}

export interface ListAvailableBudgetRequest {
    page?: number;
    start?: Date;
    end?: Date;
}

export interface StoreAvailableBudgetRequest {
    availableBudgetStore: AvailableBudgetStore;
}

export interface UpdateAvailableBudgetRequest {
    id: string;
    availableBudgetUpdate: AvailableBudgetUpdate;
}

/**
 * 
 */
export class AvailableBudgetsApi extends runtime.BaseAPI {

    /**
     * Delete an available budget. Not much more to say.
     * Delete an available budget.
     */
    async deleteAvailableBudgetRaw(requestParameters: DeleteAvailableBudgetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAvailableBudget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/available_budgets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an available budget. Not much more to say.
     * Delete an available budget.
     */
    async deleteAvailableBudget(requestParameters: DeleteAvailableBudgetRequest): Promise<void> {
        await this.deleteAvailableBudgetRaw(requestParameters);
    }

    /**
     * Get a single available budget, by ID.
     * Get a single available budget.
     */
    async getAvailableBudgetRaw(requestParameters: GetAvailableBudgetRequest): Promise<runtime.ApiResponse<AvailableBudgetSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAvailableBudget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/available_budgets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableBudgetSingleFromJSON(jsonValue));
    }

    /**
     * Get a single available budget, by ID.
     * Get a single available budget.
     */
    async getAvailableBudget(requestParameters: GetAvailableBudgetRequest): Promise<AvailableBudgetSingle> {
        const response = await this.getAvailableBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Firefly III allows users to set the amount that is available to be budgeted in so-called \"available budgets\". For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
     * List all available budget amounts.
     */
    async listAvailableBudgetRaw(requestParameters: ListAvailableBudgetRequest): Promise<runtime.ApiResponse<AvailableBudgetArray>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/available_budgets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableBudgetArrayFromJSON(jsonValue));
    }

    /**
     * Firefly III allows users to set the amount that is available to be budgeted in so-called \"available budgets\". For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set. 
     * List all available budget amounts.
     */
    async listAvailableBudget(requestParameters: ListAvailableBudgetRequest): Promise<AvailableBudgetArray> {
        const response = await this.listAvailableBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
     * Store a new available budget
     */
    async storeAvailableBudgetRaw(requestParameters: StoreAvailableBudgetRequest): Promise<runtime.ApiResponse<AvailableBudgetSingle>> {
        if (requestParameters.availableBudgetStore === null || requestParameters.availableBudgetStore === undefined) {
            throw new runtime.RequiredError('availableBudgetStore','Required parameter requestParameters.availableBudgetStore was null or undefined when calling storeAvailableBudget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/available_budgets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AvailableBudgetStoreToJSON(requestParameters.availableBudgetStore),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableBudgetSingleFromJSON(jsonValue));
    }

    /**
     * Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters. 
     * Store a new available budget
     */
    async storeAvailableBudget(requestParameters: StoreAvailableBudgetRequest): Promise<AvailableBudgetSingle> {
        const response = await this.storeAvailableBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update existing available budget.
     * Update existing available budget, to change for example the date range of the amount or the amount itself.
     */
    async updateAvailableBudgetRaw(requestParameters: UpdateAvailableBudgetRequest): Promise<runtime.ApiResponse<AvailableBudgetSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAvailableBudget.');
        }

        if (requestParameters.availableBudgetUpdate === null || requestParameters.availableBudgetUpdate === undefined) {
            throw new runtime.RequiredError('availableBudgetUpdate','Required parameter requestParameters.availableBudgetUpdate was null or undefined when calling updateAvailableBudget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.api+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/available_budgets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AvailableBudgetUpdateToJSON(requestParameters.availableBudgetUpdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableBudgetSingleFromJSON(jsonValue));
    }

    /**
     * Update existing available budget.
     * Update existing available budget, to change for example the date range of the amount or the amount itself.
     */
    async updateAvailableBudget(requestParameters: UpdateAvailableBudgetRequest): Promise<AvailableBudgetSingle> {
        const response = await this.updateAvailableBudgetRaw(requestParameters);
        return await response.value();
    }

}
