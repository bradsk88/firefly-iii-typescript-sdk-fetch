/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InsightGroupEntry,
    InsightGroupEntryFromJSON,
    InsightGroupEntryToJSON,
    InsightTotalEntry,
    InsightTotalEntryFromJSON,
    InsightTotalEntryToJSON,
    InsightTransferEntry,
    InsightTransferEntryFromJSON,
    InsightTransferEntryToJSON,
} from '../models';

export interface InsightExpenseAssetRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightExpenseBillRequest {
    start: Date;
    end: Date;
    bills?: Array<number>;
    accounts?: Array<number>;
}

export interface InsightExpenseBudgetRequest {
    start: Date;
    end: Date;
    budgets?: Array<number>;
    accounts?: Array<number>;
}

export interface InsightExpenseCategoryRequest {
    start: Date;
    end: Date;
    categories?: Array<number>;
    accounts?: Array<number>;
}

export interface InsightExpenseExpenseRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightExpenseNoBillRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightExpenseNoBudgetRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightExpenseNoCategoryRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightExpenseNoTagRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightExpenseTagRequest {
    start: Date;
    end: Date;
    tags?: Array<number>;
    accounts?: Array<number>;
}

export interface InsightExpenseTotalRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightIncomeAssetRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightIncomeCategoryRequest {
    start: Date;
    end: Date;
    categories?: Array<number>;
    accounts?: Array<number>;
}

export interface InsightIncomeNoCategoryRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightIncomeNoTagRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightIncomeRevenueRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightIncomeTagRequest {
    start: Date;
    end: Date;
    tags?: Array<number>;
    accounts?: Array<number>;
}

export interface InsightIncomeTotalRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightTransferCategoryRequest {
    start: Date;
    end: Date;
    categories?: Array<number>;
    accounts?: Array<number>;
}

export interface InsightTransferNoCategoryRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightTransferNoTagRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightTransferTagRequest {
    start: Date;
    end: Date;
    tags?: Array<number>;
    accounts?: Array<number>;
}

export interface InsightTransferTotalRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

export interface InsightTransfersRequest {
    start: Date;
    end: Date;
    accounts?: Array<number>;
}

/**
 * 
 */
export class InsightApi extends runtime.BaseAPI {

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by asset account. 
     * Insight into expenses, grouped by asset account.
     */
    async insightExpenseAssetRaw(requestParameters: InsightExpenseAssetRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseAsset.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseAsset.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/asset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by asset account. 
     * Insight into expenses, grouped by asset account.
     */
    async insightExpenseAsset(requestParameters: InsightExpenseAssetRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightExpenseAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) bill. 
     * Insight into expenses, grouped by bill.
     */
    async insightExpenseBillRaw(requestParameters: InsightExpenseBillRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseBill.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseBill.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.bills) {
            queryParameters['bills[]'] = requestParameters.bills;
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/bill`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) bill. 
     * Insight into expenses, grouped by bill.
     */
    async insightExpenseBill(requestParameters: InsightExpenseBillRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightExpenseBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) budget. 
     * Insight into expenses, grouped by budget.
     */
    async insightExpenseBudgetRaw(requestParameters: InsightExpenseBudgetRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseBudget.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.budgets) {
            queryParameters['budgets[]'] = requestParameters.budgets;
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/budget`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) budget. 
     * Insight into expenses, grouped by budget.
     */
    async insightExpenseBudget(requestParameters: InsightExpenseBudgetRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightExpenseBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) category. 
     * Insight into expenses, grouped by category.
     */
    async insightExpenseCategoryRaw(requestParameters: InsightExpenseCategoryRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseCategory.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.categories) {
            queryParameters['categories[]'] = requestParameters.categories;
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) category. 
     * Insight into expenses, grouped by category.
     */
    async insightExpenseCategory(requestParameters: InsightExpenseCategoryRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightExpenseCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by expense account. 
     * Insight into expenses, grouped by expense account.
     */
    async insightExpenseExpenseRaw(requestParameters: InsightExpenseExpenseRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseExpense.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseExpense.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/expense`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by expense account. 
     * Insight into expenses, grouped by expense account.
     */
    async insightExpenseExpense(requestParameters: InsightExpenseExpenseRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightExpenseExpenseRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no bill. 
     * Insight into expenses, without bill.
     */
    async insightExpenseNoBillRaw(requestParameters: InsightExpenseNoBillRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseNoBill.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseNoBill.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/no-bill`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no bill. 
     * Insight into expenses, without bill.
     */
    async insightExpenseNoBill(requestParameters: InsightExpenseNoBillRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightExpenseNoBillRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no budget. 
     * Insight into expenses, without budget.
     */
    async insightExpenseNoBudgetRaw(requestParameters: InsightExpenseNoBudgetRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseNoBudget.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseNoBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/no-budget`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no budget. 
     * Insight into expenses, without budget.
     */
    async insightExpenseNoBudget(requestParameters: InsightExpenseNoBudgetRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightExpenseNoBudgetRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no category. 
     * Insight into expenses, without category.
     */
    async insightExpenseNoCategoryRaw(requestParameters: InsightExpenseNoCategoryRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseNoCategory.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseNoCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/no-category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no category. 
     * Insight into expenses, without category.
     */
    async insightExpenseNoCategory(requestParameters: InsightExpenseNoCategoryRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightExpenseNoCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no tag. 
     * Insight into expenses, without tag.
     */
    async insightExpenseNoTagRaw(requestParameters: InsightExpenseNoTagRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseNoTag.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseNoTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/no-tag`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, including only expenses with no tag. 
     * Insight into expenses, without tag.
     */
    async insightExpenseNoTag(requestParameters: InsightExpenseNoTagRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightExpenseNoTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) tag. 
     * Insight into expenses, grouped by tag.
     */
    async insightExpenseTagRaw(requestParameters: InsightExpenseTagRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseTag.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.tags) {
            queryParameters['tags[]'] = requestParameters.tags;
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/tag`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the expenses made by the user, grouped by (any) tag. 
     * Insight into expenses, grouped by tag.
     */
    async insightExpenseTag(requestParameters: InsightExpenseTagRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightExpenseTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a sum of the total expenses made by the user. 
     * Insight into total expenses.
     */
    async insightExpenseTotalRaw(requestParameters: InsightExpenseTotalRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightExpenseTotal.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightExpenseTotal.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/expense/total`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a sum of the total expenses made by the user. 
     * Insight into total expenses.
     */
    async insightExpenseTotal(requestParameters: InsightExpenseTotalRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightExpenseTotalRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by asset account. 
     * Insight into income, grouped by asset account.
     */
    async insightIncomeAssetRaw(requestParameters: InsightIncomeAssetRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightIncomeAsset.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightIncomeAsset.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/income/asset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by asset account. 
     * Insight into income, grouped by asset account.
     */
    async insightIncomeAsset(requestParameters: InsightIncomeAssetRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightIncomeAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by (any) category. 
     * Insight into income, grouped by category.
     */
    async insightIncomeCategoryRaw(requestParameters: InsightIncomeCategoryRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightIncomeCategory.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightIncomeCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.categories) {
            queryParameters['categories[]'] = requestParameters.categories;
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/income/category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by (any) category. 
     * Insight into income, grouped by category.
     */
    async insightIncomeCategory(requestParameters: InsightIncomeCategoryRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightIncomeCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the income received by the user, including only income with no category. 
     * Insight into income, without category.
     */
    async insightIncomeNoCategoryRaw(requestParameters: InsightIncomeNoCategoryRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightIncomeNoCategory.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightIncomeNoCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/income/no-category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the income received by the user, including only income with no category. 
     * Insight into income, without category.
     */
    async insightIncomeNoCategory(requestParameters: InsightIncomeNoCategoryRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightIncomeNoCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the income received by the user, including only income with no tag. 
     * Insight into income, without tag.
     */
    async insightIncomeNoTagRaw(requestParameters: InsightIncomeNoTagRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightIncomeNoTag.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightIncomeNoTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/income/no-tag`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the income received by the user, including only income with no tag. 
     * Insight into income, without tag.
     */
    async insightIncomeNoTag(requestParameters: InsightIncomeNoTagRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightIncomeNoTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by revenue account. 
     * Insight into income, grouped by revenue account.
     */
    async insightIncomeRevenueRaw(requestParameters: InsightIncomeRevenueRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightIncomeRevenue.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightIncomeRevenue.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/income/revenue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by revenue account. 
     * Insight into income, grouped by revenue account.
     */
    async insightIncomeRevenue(requestParameters: InsightIncomeRevenueRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightIncomeRevenueRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by (any) tag. 
     * Insight into income, grouped by tag.
     */
    async insightIncomeTagRaw(requestParameters: InsightIncomeTagRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightIncomeTag.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightIncomeTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.tags) {
            queryParameters['tags[]'] = requestParameters.tags;
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/income/tag`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the income received by the user, grouped by (any) tag. 
     * Insight into income, grouped by tag.
     */
    async insightIncomeTag(requestParameters: InsightIncomeTagRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightIncomeTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a sum of the total income received by the user. 
     * Insight into total income.
     */
    async insightIncomeTotalRaw(requestParameters: InsightIncomeTotalRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightIncomeTotal.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightIncomeTotal.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/income/total`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a sum of the total income received by the user. 
     * Insight into total income.
     */
    async insightIncomeTotal(requestParameters: InsightIncomeTotalRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightIncomeTotalRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, grouped by (any) category. 
     * Insight into transfers, grouped by category.
     */
    async insightTransferCategoryRaw(requestParameters: InsightTransferCategoryRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightTransferCategory.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightTransferCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.categories) {
            queryParameters['categories[]'] = requestParameters.categories;
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/transfer/category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, grouped by (any) category. 
     * Insight into transfers, grouped by category.
     */
    async insightTransferCategory(requestParameters: InsightTransferCategoryRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightTransferCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no category. 
     * Insight into transfers, without category.
     */
    async insightTransferNoCategoryRaw(requestParameters: InsightTransferNoCategoryRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightTransferNoCategory.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightTransferNoCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/transfer/no-category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no category. 
     * Insight into transfers, without category.
     */
    async insightTransferNoCategory(requestParameters: InsightTransferNoCategoryRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightTransferNoCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no tag. 
     * Insight into expenses, without tag.
     */
    async insightTransferNoTagRaw(requestParameters: InsightTransferNoTagRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightTransferNoTag.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightTransferNoTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/transfer/no-tag`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, including only transfers with no tag. 
     * Insight into expenses, without tag.
     */
    async insightTransferNoTag(requestParameters: InsightTransferNoTagRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightTransferNoTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the transfers created by the user, grouped by (any) tag. 
     * Insight into transfers, grouped by tag.
     */
    async insightTransferTagRaw(requestParameters: InsightTransferTagRequest): Promise<runtime.ApiResponse<Array<InsightGroupEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightTransferTag.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightTransferTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.tags) {
            queryParameters['tags[]'] = requestParameters.tags;
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/transfer/tag`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightGroupEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the transfers created by the user, grouped by (any) tag. 
     * Insight into transfers, grouped by tag.
     */
    async insightTransferTag(requestParameters: InsightTransferTagRequest): Promise<Array<InsightGroupEntry>> {
        const response = await this.insightTransferTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a sum of the total amount transfers made by the user. 
     * Insight into total transfers.
     */
    async insightTransferTotalRaw(requestParameters: InsightTransferTotalRequest): Promise<runtime.ApiResponse<Array<InsightTotalEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightTransferTotal.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightTransferTotal.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/transfer/total`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTotalEntryFromJSON));
    }

    /**
     * This endpoint gives a sum of the total amount transfers made by the user. 
     * Insight into total transfers.
     */
    async insightTransferTotal(requestParameters: InsightTransferTotalRequest): Promise<Array<InsightTotalEntry>> {
        const response = await this.insightTransferTotalRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability. 
     * Insight into transfers, grouped by account.
     */
    async insightTransfersRaw(requestParameters: InsightTransfersRequest): Promise<runtime.ApiResponse<Array<InsightTransferEntry>>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling insightTransfers.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling insightTransfers.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.accounts) {
            queryParameters['accounts[]'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/insight/transfer/asset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InsightTransferEntryFromJSON));
    }

    /**
     * This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability. 
     * Insight into transfers, grouped by account.
     */
    async insightTransfers(requestParameters: InsightTransfersRequest): Promise<Array<InsightTransferEntry>> {
        const response = await this.insightTransfersRaw(requestParameters);
        return await response.value();
    }

}
