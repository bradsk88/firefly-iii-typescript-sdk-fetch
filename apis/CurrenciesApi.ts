/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountArray,
    AccountArrayFromJSON,
    AccountArrayToJSON,
    AccountTypeFilter,
    AccountTypeFilterFromJSON,
    AccountTypeFilterToJSON,
    AvailableBudgetArray,
    AvailableBudgetArrayFromJSON,
    AvailableBudgetArrayToJSON,
    BillArray,
    BillArrayFromJSON,
    BillArrayToJSON,
    BudgetLimitArray,
    BudgetLimitArrayFromJSON,
    BudgetLimitArrayToJSON,
    CurrencyArray,
    CurrencyArrayFromJSON,
    CurrencyArrayToJSON,
    CurrencySingle,
    CurrencySingleFromJSON,
    CurrencySingleToJSON,
    CurrencyStore,
    CurrencyStoreFromJSON,
    CurrencyStoreToJSON,
    CurrencyUpdate,
    CurrencyUpdateFromJSON,
    CurrencyUpdateToJSON,
    RecurrenceArray,
    RecurrenceArrayFromJSON,
    RecurrenceArrayToJSON,
    RuleArray,
    RuleArrayFromJSON,
    RuleArrayToJSON,
    TransactionArray,
    TransactionArrayFromJSON,
    TransactionArrayToJSON,
    TransactionTypeFilter,
    TransactionTypeFilterFromJSON,
    TransactionTypeFilterToJSON,
    ValidationError,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface DefaultCurrencyRequest {
    code: string;
}

export interface DeleteCurrencyRequest {
    code: string;
}

export interface DisableCurrencyRequest {
    code: number;
}

export interface EnableCurrencyRequest {
    code: string;
}

export interface GetCurrencyRequest {
    code: string;
}

export interface ListAccountByCurrencyRequest {
    code: string;
    page?: number;
    date?: Date;
    type?: AccountTypeFilter;
}

export interface ListAvailableBudgetByCurrencyRequest {
    code: string;
    page?: number;
}

export interface ListBillByCurrencyRequest {
    code: string;
    page?: number;
}

export interface ListBudgetLimitByCurrencyRequest {
    code: string;
    page?: number;
    start?: Date;
    end?: Date;
}

export interface ListCurrencyRequest {
    page?: number;
}

export interface ListRecurrenceByCurrencyRequest {
    code: string;
    page?: number;
}

export interface ListRuleByCurrencyRequest {
    code: string;
    page?: number;
}

export interface ListTransactionByCurrencyRequest {
    code: string;
    page?: number;
    start?: Date;
    end?: Date;
    type?: TransactionTypeFilter;
}

export interface StoreCurrencyRequest {
    currencyStore: CurrencyStore;
}

export interface UpdateCurrencyRequest {
    code: string;
    currencyUpdate: CurrencyUpdate;
}

/**
 * 
 */
export class CurrenciesApi extends runtime.BaseAPI {

    /**
     * Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
     * Make currency default currency.
     */
    async defaultCurrencyRaw(requestParameters: DefaultCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling defaultCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}/default`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencySingleFromJSON(jsonValue));
    }

    /**
     * Make this currency the default currency for the user. If the currency is not enabled, it will be enabled as well.
     * Make currency default currency.
     */
    async defaultCurrency(requestParameters: DefaultCurrencyRequest): Promise<CurrencySingle> {
        const response = await this.defaultCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a currency.
     * Delete a currency.
     */
    async deleteCurrencyRaw(requestParameters: DeleteCurrencyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a currency.
     * Delete a currency.
     */
    async deleteCurrency(requestParameters: DeleteCurrencyRequest): Promise<void> {
        await this.deleteCurrencyRaw(requestParameters);
    }

    /**
     * Disable a currency.
     * Disable a currency.
     */
    async disableCurrencyRaw(requestParameters: DisableCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling disableCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}/disable`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencySingleFromJSON(jsonValue));
    }

    /**
     * Disable a currency.
     * Disable a currency.
     */
    async disableCurrency(requestParameters: DisableCurrencyRequest): Promise<CurrencySingle> {
        const response = await this.disableCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Enable a single currency.
     * Enable a single currency.
     */
    async enableCurrencyRaw(requestParameters: EnableCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling enableCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}/enable`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencySingleFromJSON(jsonValue));
    }

    /**
     * Enable a single currency.
     * Enable a single currency.
     */
    async enableCurrency(requestParameters: EnableCurrencyRequest): Promise<CurrencySingle> {
        const response = await this.enableCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a single currency.
     * Get a single currency.
     */
    async getCurrencyRaw(requestParameters: GetCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencySingleFromJSON(jsonValue));
    }

    /**
     * Get a single currency.
     * Get a single currency.
     */
    async getCurrency(requestParameters: GetCurrencyRequest): Promise<CurrencySingle> {
        const response = await this.getCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the user\'s default currency.
     * Get the user\'s default currency.
     */
    async getDefaultCurrencyRaw(): Promise<runtime.ApiResponse<CurrencySingle>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/default`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencySingleFromJSON(jsonValue));
    }

    /**
     * Get the user\'s default currency.
     * Get the user\'s default currency.
     */
    async getDefaultCurrency(): Promise<CurrencySingle> {
        const response = await this.getDefaultCurrencyRaw();
        return await response.value();
    }

    /**
     * List all accounts with this currency.
     * List all accounts with this currency.
     */
    async listAccountByCurrencyRaw(requestParameters: ListAccountByCurrencyRequest): Promise<runtime.ApiResponse<AccountArray>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling listAccountByCurrency.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = (requestParameters.date as any).toISOString().substr(0,10);
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}/accounts`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountArrayFromJSON(jsonValue));
    }

    /**
     * List all accounts with this currency.
     * List all accounts with this currency.
     */
    async listAccountByCurrency(requestParameters: ListAccountByCurrencyRequest): Promise<AccountArray> {
        const response = await this.listAccountByCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all available budgets with this currency.
     * List all available budgets with this currency.
     */
    async listAvailableBudgetByCurrencyRaw(requestParameters: ListAvailableBudgetByCurrencyRequest): Promise<runtime.ApiResponse<AvailableBudgetArray>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling listAvailableBudgetByCurrency.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}/available_budgets`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableBudgetArrayFromJSON(jsonValue));
    }

    /**
     * List all available budgets with this currency.
     * List all available budgets with this currency.
     */
    async listAvailableBudgetByCurrency(requestParameters: ListAvailableBudgetByCurrencyRequest): Promise<AvailableBudgetArray> {
        const response = await this.listAvailableBudgetByCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all bills with this currency.
     * List all bills with this currency.
     */
    async listBillByCurrencyRaw(requestParameters: ListBillByCurrencyRequest): Promise<runtime.ApiResponse<BillArray>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling listBillByCurrency.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}/bills`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BillArrayFromJSON(jsonValue));
    }

    /**
     * List all bills with this currency.
     * List all bills with this currency.
     */
    async listBillByCurrency(requestParameters: ListBillByCurrencyRequest): Promise<BillArray> {
        const response = await this.listBillByCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all budget limits with this currency
     * List all budget limits with this currency
     */
    async listBudgetLimitByCurrencyRaw(requestParameters: ListBudgetLimitByCurrencyRequest): Promise<runtime.ApiResponse<BudgetLimitArray>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling listBudgetLimitByCurrency.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}/budget_limits`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetLimitArrayFromJSON(jsonValue));
    }

    /**
     * List all budget limits with this currency
     * List all budget limits with this currency
     */
    async listBudgetLimitByCurrency(requestParameters: ListBudgetLimitByCurrencyRequest): Promise<BudgetLimitArray> {
        const response = await this.listBudgetLimitByCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all currencies.
     * List all currencies.
     */
    async listCurrencyRaw(requestParameters: ListCurrencyRequest): Promise<runtime.ApiResponse<CurrencyArray>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyArrayFromJSON(jsonValue));
    }

    /**
     * List all currencies.
     * List all currencies.
     */
    async listCurrency(requestParameters: ListCurrencyRequest): Promise<CurrencyArray> {
        const response = await this.listCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all recurring transactions with this currency.
     * List all recurring transactions with this currency.
     */
    async listRecurrenceByCurrencyRaw(requestParameters: ListRecurrenceByCurrencyRequest): Promise<runtime.ApiResponse<RecurrenceArray>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling listRecurrenceByCurrency.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}/recurrences`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurrenceArrayFromJSON(jsonValue));
    }

    /**
     * List all recurring transactions with this currency.
     * List all recurring transactions with this currency.
     */
    async listRecurrenceByCurrency(requestParameters: ListRecurrenceByCurrencyRequest): Promise<RecurrenceArray> {
        const response = await this.listRecurrenceByCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all rules with this currency.
     * List all rules with this currency.
     */
    async listRuleByCurrencyRaw(requestParameters: ListRuleByCurrencyRequest): Promise<runtime.ApiResponse<RuleArray>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling listRuleByCurrency.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}/rules`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RuleArrayFromJSON(jsonValue));
    }

    /**
     * List all rules with this currency.
     * List all rules with this currency.
     */
    async listRuleByCurrency(requestParameters: ListRuleByCurrencyRequest): Promise<RuleArray> {
        const response = await this.listRuleByCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all transactions with this currency.
     * List all transactions with this currency.
     */
    async listTransactionByCurrencyRaw(requestParameters: ListTransactionByCurrencyRequest): Promise<runtime.ApiResponse<TransactionArray>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling listTransactionByCurrency.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}/transactions`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionArrayFromJSON(jsonValue));
    }

    /**
     * List all transactions with this currency.
     * List all transactions with this currency.
     */
    async listTransactionByCurrency(requestParameters: ListTransactionByCurrencyRequest): Promise<TransactionArray> {
        const response = await this.listTransactionByCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new currency
     */
    async storeCurrencyRaw(requestParameters: StoreCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>> {
        if (requestParameters.currencyStore === null || requestParameters.currencyStore === undefined) {
            throw new runtime.RequiredError('currencyStore','Required parameter requestParameters.currencyStore was null or undefined when calling storeCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyStoreToJSON(requestParameters.currencyStore),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencySingleFromJSON(jsonValue));
    }

    /**
     * Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new currency
     */
    async storeCurrency(requestParameters: StoreCurrencyRequest): Promise<CurrencySingle> {
        const response = await this.storeCurrencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update existing currency.
     * Update existing currency.
     */
    async updateCurrencyRaw(requestParameters: UpdateCurrencyRequest): Promise<runtime.ApiResponse<CurrencySingle>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updateCurrency.');
        }

        if (requestParameters.currencyUpdate === null || requestParameters.currencyUpdate === undefined) {
            throw new runtime.RequiredError('currencyUpdate','Required parameter requestParameters.currencyUpdate was null or undefined when calling updateCurrency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/vnd.api+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("firefly_iii_auth", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/api/v1/currencies/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyUpdateToJSON(requestParameters.currencyUpdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencySingleFromJSON(jsonValue));
    }

    /**
     * Update existing currency.
     * Update existing currency.
     */
    async updateCurrency(requestParameters: UpdateCurrencyRequest): Promise<CurrencySingle> {
        const response = await this.updateCurrencyRaw(requestParameters);
        return await response.value();
    }

}
