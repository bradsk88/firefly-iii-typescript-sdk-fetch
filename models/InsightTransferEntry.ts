/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InsightTransferEntry
 */
export interface InsightTransferEntry {
    /**
     * This ID is a reference to the original object.
     * @type {string}
     * @memberof InsightTransferEntry
     */
    id?: string;
    /**
     * This is the name of the object.
     * @type {string}
     * @memberof InsightTransferEntry
     */
    name?: string;
    /**
     * The total amount transferred between start date and end date, a number defined as a string, for this asset account.
     * @type {string}
     * @memberof InsightTransferEntry
     */
    difference?: string;
    /**
     * The total amount transferred between start date and end date, a number as a float, for this asset account. May have rounding errors.
     * @type {number}
     * @memberof InsightTransferEntry
     */
    differenceFloat?: number;
    /**
     * The total amount transferred TO this account between start date and end date, a number defined as a string, for this asset account.
     * @type {string}
     * @memberof InsightTransferEntry
     */
    _in?: string;
    /**
     * The total amount transferred FROM this account between start date and end date, a number as a float, for this asset account. May have rounding errors.
     * @type {number}
     * @memberof InsightTransferEntry
     */
    inFloat?: number;
    /**
     * The total amount transferred FROM this account between start date and end date, a number defined as a string, for this asset account.
     * @type {string}
     * @memberof InsightTransferEntry
     */
    out?: string;
    /**
     * The total amount transferred TO this account between start date and end date, a number as a float, for this asset account. May have rounding errors.
     * @type {number}
     * @memberof InsightTransferEntry
     */
    outFloat?: number;
    /**
     * The currency ID of the expenses listed for this account.
     * @type {string}
     * @memberof InsightTransferEntry
     */
    currencyId?: string;
    /**
     * The currency code of the expenses listed for this account.
     * @type {string}
     * @memberof InsightTransferEntry
     */
    currencyCode?: string;
}

export function InsightTransferEntryFromJSON(json: any): InsightTransferEntry {
    return InsightTransferEntryFromJSONTyped(json, false);
}

export function InsightTransferEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): InsightTransferEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'difference': !exists(json, 'difference') ? undefined : json['difference'],
        'differenceFloat': !exists(json, 'difference_float') ? undefined : json['difference_float'],
        '_in': !exists(json, 'in') ? undefined : json['in'],
        'inFloat': !exists(json, 'in_float') ? undefined : json['in_float'],
        'out': !exists(json, 'out') ? undefined : json['out'],
        'outFloat': !exists(json, 'out_float') ? undefined : json['out_float'],
        'currencyId': !exists(json, 'currency_id') ? undefined : json['currency_id'],
        'currencyCode': !exists(json, 'currency_code') ? undefined : json['currency_code'],
    };
}

export function InsightTransferEntryToJSON(value?: InsightTransferEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'difference': value.difference,
        'difference_float': value.differenceFloat,
        'in': value._in,
        'in_float': value.inFloat,
        'out': value.out,
        'out_float': value.outFloat,
        'currency_id': value.currencyId,
        'currency_code': value.currencyCode,
    };
}


