/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BudgetSpent,
    BudgetSpentFromJSON,
    BudgetSpentFromJSONTyped,
    BudgetSpentToJSON,
} from './';

/**
 * 
 * @export
 * @interface AvailableBudget
 */
export interface AvailableBudget {
    /**
     * 
     * @type {Date}
     * @memberof AvailableBudget
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AvailableBudget
     */
    readonly updatedAt?: Date;
    /**
     * Use either currency_id or currency_code.
     * @type {string}
     * @memberof AvailableBudget
     */
    currencyId?: string;
    /**
     * Use either currency_id or currency_code.
     * @type {string}
     * @memberof AvailableBudget
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AvailableBudget
     */
    readonly currencySymbol?: string;
    /**
     * 
     * @type {number}
     * @memberof AvailableBudget
     */
    readonly currencyDecimalPlaces?: number;
    /**
     * 
     * @type {string}
     * @memberof AvailableBudget
     */
    amount: string;
    /**
     * Start date of the available budget.
     * @type {Date}
     * @memberof AvailableBudget
     */
    start: Date;
    /**
     * End date of the available budget.
     * @type {Date}
     * @memberof AvailableBudget
     */
    end: Date;
    /**
     * 
     * @type {Array<BudgetSpent>}
     * @memberof AvailableBudget
     */
    readonly spentInBudgets?: Array<BudgetSpent>;
    /**
     * 
     * @type {Array<BudgetSpent>}
     * @memberof AvailableBudget
     */
    readonly spentOutsideBudget?: Array<BudgetSpent>;
}

export function AvailableBudgetFromJSON(json: any): AvailableBudget {
    return AvailableBudgetFromJSONTyped(json, false);
}

export function AvailableBudgetFromJSONTyped(json: any, ignoreDiscriminator: boolean): AvailableBudget {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'currencyId': !exists(json, 'currency_id') ? undefined : json['currency_id'],
        'currencyCode': !exists(json, 'currency_code') ? undefined : json['currency_code'],
        'currencySymbol': !exists(json, 'currency_symbol') ? undefined : json['currency_symbol'],
        'currencyDecimalPlaces': !exists(json, 'currency_decimal_places') ? undefined : json['currency_decimal_places'],
        'amount': json['amount'],
        'start': (new Date(json['start'])),
        'end': (new Date(json['end'])),
        'spentInBudgets': !exists(json, 'spent_in_budgets') ? undefined : ((json['spent_in_budgets'] as Array<any>).map(BudgetSpentFromJSON)),
        'spentOutsideBudget': !exists(json, 'spent_outside_budget') ? undefined : ((json['spent_outside_budget'] as Array<any>).map(BudgetSpentFromJSON)),
    };
}

export function AvailableBudgetToJSON(value?: AvailableBudget | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currency_id': value.currencyId,
        'currency_code': value.currencyCode,
        'amount': value.amount,
        'start': (value.start.toISOString()),
        'end': (value.end.toISOString()),
    };
}


