/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RecurrenceTransactionUpdate
 */
export interface RecurrenceTransactionUpdate {
    /**
     * 
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    description?: string;
    /**
     * Amount of the transaction.
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    amount?: string;
    /**
     * Foreign amount of the transaction.
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    foreignAmount?: string | null;
    /**
     * Submit either a currency_id or a currency_code.
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    currencyId?: string;
    /**
     * Submit either a currency_id or a currency_code.
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    currencyCode?: string;
    /**
     * Submit either a foreign_currency_id or a foreign_currency_code, or neither.
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    foreignCurrencyId?: string | null;
    /**
     * The budget ID for this transaction.
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    budgetId?: string;
    /**
     * Category ID for this transaction.
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    categoryId?: string;
    /**
     * ID of the source account. Submit either this or source_name.
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    sourceId?: string;
    /**
     * ID of the destination account. Submit either this or destination_name.
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    destinationId?: string;
    /**
     * Array of tags.
     * @type {Array<string>}
     * @memberof RecurrenceTransactionUpdate
     */
    tags?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof RecurrenceTransactionUpdate
     */
    piggyBankId?: string | null;
}

export function RecurrenceTransactionUpdateFromJSON(json: any): RecurrenceTransactionUpdate {
    return RecurrenceTransactionUpdateFromJSONTyped(json, false);
}

export function RecurrenceTransactionUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecurrenceTransactionUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'foreignAmount': !exists(json, 'foreign_amount') ? undefined : json['foreign_amount'],
        'currencyId': !exists(json, 'currency_id') ? undefined : json['currency_id'],
        'currencyCode': !exists(json, 'currency_code') ? undefined : json['currency_code'],
        'foreignCurrencyId': !exists(json, 'foreign_currency_id') ? undefined : json['foreign_currency_id'],
        'budgetId': !exists(json, 'budget_id') ? undefined : json['budget_id'],
        'categoryId': !exists(json, 'category_id') ? undefined : json['category_id'],
        'sourceId': !exists(json, 'source_id') ? undefined : json['source_id'],
        'destinationId': !exists(json, 'destination_id') ? undefined : json['destination_id'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'piggyBankId': !exists(json, 'piggy_bank_id') ? undefined : json['piggy_bank_id'],
    };
}

export function RecurrenceTransactionUpdateToJSON(value?: RecurrenceTransactionUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'amount': value.amount,
        'foreign_amount': value.foreignAmount,
        'currency_id': value.currencyId,
        'currency_code': value.currencyCode,
        'foreign_currency_id': value.foreignCurrencyId,
        'budget_id': value.budgetId,
        'category_id': value.categoryId,
        'source_id': value.sourceId,
        'destination_id': value.destinationId,
        'tags': value.tags,
        'piggy_bank_id': value.piggyBankId,
    };
}


