/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v1.5.6
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2022-04-04T03:54:41+00:00 
 *
 * The version of the OpenAPI document: 1.5.6
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AutocompleteAccount
 */
export interface AutocompleteAccount {
    /**
     * 
     * @type {string}
     * @memberof AutocompleteAccount
     */
    id: string;
    /**
     * Name of the account found by an auto-complete search.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    name: string;
    /**
     * Asset accounts and liabilities have a second field with the given date's account balance.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    nameWithBalance: string;
    /**
     * Account type of the account found by the auto-complete search.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    type: string;
    /**
     * ID for the currency used by this account.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    currencyId: string;
    /**
     * Currency name for the currency used by this account.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    currencyName: string;
    /**
     * Currency code for the currency used by this account.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    currencyCode: string;
    /**
     * Currency symbol for the currency used by this account.
     * @type {string}
     * @memberof AutocompleteAccount
     */
    currencySymbol: string;
    /**
     * Number of decimal places for the currency used by this account.
     * @type {number}
     * @memberof AutocompleteAccount
     */
    currencyDecimalPlaces: number;
}

export function AutocompleteAccountFromJSON(json: any): AutocompleteAccount {
    return AutocompleteAccountFromJSONTyped(json, false);
}

export function AutocompleteAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutocompleteAccount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'nameWithBalance': json['name_with_balance'],
        'type': json['type'],
        'currencyId': json['currency_id'],
        'currencyName': json['currency_name'],
        'currencyCode': json['currency_code'],
        'currencySymbol': json['currency_symbol'],
        'currencyDecimalPlaces': json['currency_decimal_places'],
    };
}

export function AutocompleteAccountToJSON(value?: AutocompleteAccount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'name_with_balance': value.nameWithBalance,
        'type': value.type,
        'currency_id': value.currencyId,
        'currency_name': value.currencyName,
        'currency_code': value.currencyCode,
        'currency_symbol': value.currencySymbol,
        'currency_decimal_places': value.currencyDecimalPlaces,
    };
}


